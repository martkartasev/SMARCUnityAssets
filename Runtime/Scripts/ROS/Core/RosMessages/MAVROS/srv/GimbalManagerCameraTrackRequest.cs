//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.Mavros
{
    [Serializable]
    public class GimbalManagerCameraTrackRequest : Message
    {
        public const string k_RosMessageName = "mavros_msgs/GimbalManagerCameraTrack";
        public override string RosMessageName => k_RosMessageName;

        //  MAVLink commands: CAMERA_TRACK_POINT, CAMERA_TRACK_RECTANGLE, CAMERA_STOP_TRACKING
        //  https://mavlink.io/en/messages/common.html#MAV_CMD_CAMERA_TRACK_POINT
        //  https://mavlink.io/en/messages/common.html#MAV_CMD_CAMERA_TRACK_RECTANGLE
        //  https://mavlink.io/en/messages/common.html#MAV_CMD_CAMERA_STOP_TRACKING
        public byte mode;
        //  enumerator to indicate camera track mode setting - see CAMERA_TRACK_MODE
        // CAMERA_TRACK_MODE
        public const byte CAMERA_TRACK_MODE_POINT = 0; //  If the camera supports point visual tracking (CAMERA_CAP_FLAGS_HAS_TRACKING_POINT is set), this command allows to initiate the tracking. [CAMERA_TRACK_POINT]
        public const byte CAMERA_TRACK_MODE_RECTANGLE = 1; //  If the camera supports rectangle visual tracking (CAMERA_CAP_FLAGS_HAS_TRACKING_RECTANGLE is set), this command allows to initiate the tracking. [CAMERA_TRACK_RECTANGLE]
        public const byte CAMERA_TRACK_MODE_STOP_TRACKING = 2; //  Stops ongoing tracking. [CAMERA_STOP_TRACKING]
        // For CAMERA_TRACK_POINT
        public float x;
        //  Point to track x value (normalized 0..1, 0 is left, 1 is right).
        public float y;
        //  Point to track y value (normalized 0..1, 0 is top, 1 is bottom).
        public float radius;
        //  Point radius (normalized 0..1, 0 is image left, 1 is image right).
        // For CAMERA_TRACK_RECTANGLE
        public float top_left_x;
        //  Top left corner of rectangle x value (normalized 0..1, 0 is left, 1 is right).
        public float top_left_y;
        //  Top left corner of rectangle y value (normalized 0..1, 0 is top, 1 is bottom).
        public float bottom_right_x;
        //  Bottom right corner of rectangle x value (normalized 0..1, 0 is left, 1 is right).
        public float bottom_right_y;
        //  Bottom right corner of rectangle y value (normalized 0..1, 0 is top, 1 is bottom).
        // CAMERA_STOP_TRACKING doesn't take extra parameters

        public GimbalManagerCameraTrackRequest()
        {
            this.mode = 0;
            this.x = 0.0f;
            this.y = 0.0f;
            this.radius = 0.0f;
            this.top_left_x = 0.0f;
            this.top_left_y = 0.0f;
            this.bottom_right_x = 0.0f;
            this.bottom_right_y = 0.0f;
        }

        public GimbalManagerCameraTrackRequest(byte mode, float x, float y, float radius, float top_left_x, float top_left_y, float bottom_right_x, float bottom_right_y)
        {
            this.mode = mode;
            this.x = x;
            this.y = y;
            this.radius = radius;
            this.top_left_x = top_left_x;
            this.top_left_y = top_left_y;
            this.bottom_right_x = bottom_right_x;
            this.bottom_right_y = bottom_right_y;
        }

        public static GimbalManagerCameraTrackRequest Deserialize(MessageDeserializer deserializer) => new GimbalManagerCameraTrackRequest(deserializer);

        private GimbalManagerCameraTrackRequest(MessageDeserializer deserializer)
        {
            deserializer.Read(out this.mode);
            deserializer.Read(out this.x);
            deserializer.Read(out this.y);
            deserializer.Read(out this.radius);
            deserializer.Read(out this.top_left_x);
            deserializer.Read(out this.top_left_y);
            deserializer.Read(out this.bottom_right_x);
            deserializer.Read(out this.bottom_right_y);
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.Write(this.mode);
            serializer.Write(this.x);
            serializer.Write(this.y);
            serializer.Write(this.radius);
            serializer.Write(this.top_left_x);
            serializer.Write(this.top_left_y);
            serializer.Write(this.bottom_right_x);
            serializer.Write(this.bottom_right_y);
        }

        public override string ToString()
        {
            return "GimbalManagerCameraTrackRequest: " +
            "\nmode: " + mode.ToString() +
            "\nx: " + x.ToString() +
            "\ny: " + y.ToString() +
            "\nradius: " + radius.ToString() +
            "\ntop_left_x: " + top_left_x.ToString() +
            "\ntop_left_y: " + top_left_y.ToString() +
            "\nbottom_right_x: " + bottom_right_x.ToString() +
            "\nbottom_right_y: " + bottom_right_y.ToString();
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize);
        }
    }
}
