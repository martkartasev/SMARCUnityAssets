//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.Mavros
{
    [Serializable]
    public class GimbalManagerSetRoiRequest : Message
    {
        public const string k_RosMessageName = "mavros_msgs/GimbalManagerSetRoi";
        public override string RosMessageName => k_RosMessageName;

        //  MAVLink commands: DO_SET_ROI_LOCATION, DO_SET_ROI_WPNEXT_OFFSET, DO_SET_ROI_SYSID, DO_SET_ROI_NONE
        //  https://mavlink.io/en/messages/common.html#MAV_CMD_DO_SET_ROI_LOCATION
        //  https://mavlink.io/en/messages/common.html#MAV_CMD_DO_SET_ROI_WPNEXT_OFFSET
        //  https://mavlink.io/en/messages/common.html#MAV_CMD_DO_SET_ROI_SYSID
        //  https://mavlink.io/en/messages/common.html#MAV_CMD_DO_SET_ROI_NONE
        public byte mode;
        //  enumerator to indicate ROI mode setting - see ROI_MODE
        // ROI_MODE
        public const byte ROI_MODE_LOCATION = 0; //  Sets the region of interest (ROI) to a location. [DO_SET_ROI_LOCATION]
        public const byte ROI_MODE_WP_NEXT_OFFSET = 1; //  Sets the region of interest (ROI) to be toward next waypoint, with optional pitch/roll/yaw offset. [DO_SET_ROI_WPNEXT_OFFSET]
        public const byte ROI_MODE_SYSID = 2; //  Mount tracks system with specified system ID [DO_SET_ROI_SYSID]
        public const byte ROI_MODE_NONE = 3; //  Cancels any previous ROI setting and returns vehicle to defaults [DO_SET_ROI_NONE]
        public byte gimbal_device_id;
        //  Component ID of gimbal device to address 
        //  (or 1-6 for non-MAVLink gimbal), 0 for all gimbal device
        //  components. Send command multiple times for more than
        //  one gimbal (but not all gimbals).  Default Mavlink gimbal 
        //  device ids: 154, 171-175
        // For ROI_MODE_LOCATION
        public float latitude;
        public float longitude;
        public float altitude;
        //  Meters
        // For ROI_MODE_WP_NEXT_OFFSET
        public float pitch_offset;
        //  Pitch offset from next waypoint, positive pitching up
        public float roll_offset;
        //  Roll offset from next waypoint, positive rolling to the right
        public float yaw_offset;
        //  Yaw offset from next waypoint, positive yawing to the right
        // For ROI_MODE_SYSID
        public byte sysid;
        //  System ID to track (min: 1, max: 255)
        // ROI_MODE_NONE doesn't take extra parameters

        public GimbalManagerSetRoiRequest()
        {
            this.mode = 0;
            this.gimbal_device_id = 0;
            this.latitude = 0.0f;
            this.longitude = 0.0f;
            this.altitude = 0.0f;
            this.pitch_offset = 0.0f;
            this.roll_offset = 0.0f;
            this.yaw_offset = 0.0f;
            this.sysid = 0;
        }

        public GimbalManagerSetRoiRequest(byte mode, byte gimbal_device_id, float latitude, float longitude, float altitude, float pitch_offset, float roll_offset, float yaw_offset, byte sysid)
        {
            this.mode = mode;
            this.gimbal_device_id = gimbal_device_id;
            this.latitude = latitude;
            this.longitude = longitude;
            this.altitude = altitude;
            this.pitch_offset = pitch_offset;
            this.roll_offset = roll_offset;
            this.yaw_offset = yaw_offset;
            this.sysid = sysid;
        }

        public static GimbalManagerSetRoiRequest Deserialize(MessageDeserializer deserializer) => new GimbalManagerSetRoiRequest(deserializer);

        private GimbalManagerSetRoiRequest(MessageDeserializer deserializer)
        {
            deserializer.Read(out this.mode);
            deserializer.Read(out this.gimbal_device_id);
            deserializer.Read(out this.latitude);
            deserializer.Read(out this.longitude);
            deserializer.Read(out this.altitude);
            deserializer.Read(out this.pitch_offset);
            deserializer.Read(out this.roll_offset);
            deserializer.Read(out this.yaw_offset);
            deserializer.Read(out this.sysid);
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.Write(this.mode);
            serializer.Write(this.gimbal_device_id);
            serializer.Write(this.latitude);
            serializer.Write(this.longitude);
            serializer.Write(this.altitude);
            serializer.Write(this.pitch_offset);
            serializer.Write(this.roll_offset);
            serializer.Write(this.yaw_offset);
            serializer.Write(this.sysid);
        }

        public override string ToString()
        {
            return "GimbalManagerSetRoiRequest: " +
            "\nmode: " + mode.ToString() +
            "\ngimbal_device_id: " + gimbal_device_id.ToString() +
            "\nlatitude: " + latitude.ToString() +
            "\nlongitude: " + longitude.ToString() +
            "\naltitude: " + altitude.ToString() +
            "\npitch_offset: " + pitch_offset.ToString() +
            "\nroll_offset: " + roll_offset.ToString() +
            "\nyaw_offset: " + yaw_offset.ToString() +
            "\nsysid: " + sysid.ToString();
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize);
        }
    }
}
