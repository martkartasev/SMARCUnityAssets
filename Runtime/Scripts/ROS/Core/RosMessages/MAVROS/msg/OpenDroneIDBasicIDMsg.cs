//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.Mavros
{
    [Serializable]
    public class OpenDroneIDBasicIDMsg : Message
    {
        public const string k_RosMessageName = "mavros_msgs/OpenDroneIDBasicID";
        public override string RosMessageName => k_RosMessageName;

        //  Remote ID message - Basic ID
        //  https://mavlink.io/en/messages/common.html#OPEN_DRONE_ID_BASIC_ID
        //  [[[cog:
        //  import mavros_cog
        //  mavros_cog.idl_decl_enum('MAV_ODID_ID_TYPE', 'ID_TYPE_')
        //  mavros_cog.idl_decl_enum('MAV_ODID_UA_TYPE', 'UA_TYPE_')
        //  ]]]
        //  MAV_ODID_ID_TYPE
        public const byte ID_TYPE_NONE = 0; //  No type defined.
        public const byte ID_TYPE_SERIAL_NUMBER = 1; //  Manufacturer Serial Number (ANSI/CTA-2063 format).
        public const byte ID_TYPE_CAA_REGISTRATION_ID = 2; //  CAA (Civil Aviation Authority) registered ID. Format: [ICAO Country Code].[CAA Assigned ID].
        public const byte ID_TYPE_UTM_ASSIGNED_UUID = 3; //  UTM (Unmanned Traffic Management) assigned UUID (RFC4122).
        public const byte ID_TYPE_SPECIFIC_SESSION_ID = 4; //  A 20 byte ID for a specific flight/session. The exact ID type is indicated by the first byte of uas_id and these type values are managed by ICAO.
        //  MAV_ODID_UA_TYPE
        public const byte UA_TYPE_NONE = 0; //  No UA (Unmanned Aircraft) type defined.
        public const byte UA_TYPE_AEROPLANE = 1; //  Aeroplane/Airplane. Fixed wing.
        public const byte UA_TYPE_HELICOPTER_OR_MULTIROTOR = 2; //  Helicopter or multirotor.
        public const byte UA_TYPE_GYROPLANE = 3; //  Gyroplane.
        public const byte UA_TYPE_HYBRID_LIFT = 4; //  VTOL (Vertical Take-Off and Landing). Fixed wing aircraft that can take off vertically.
        public const byte UA_TYPE_ORNITHOPTER = 5; //  Ornithopter.
        public const byte UA_TYPE_GLIDER = 6; //  Glider.
        public const byte UA_TYPE_KITE = 7; //  Kite.
        public const byte UA_TYPE_FREE_BALLOON = 8; //  Free Balloon.
        public const byte UA_TYPE_CAPTIVE_BALLOON = 9; //  Captive Balloon.
        public const byte UA_TYPE_AIRSHIP = 10; //  Airship. E.g. a blimp.
        public const byte UA_TYPE_FREE_FALL_PARACHUTE = 11; //  Free Fall/Parachute (unpowered).
        public const byte UA_TYPE_ROCKET = 12; //  Rocket.
        public const byte UA_TYPE_TETHERED_POWERED_AIRCRAFT = 13; //  Tethered powered aircraft.
        public const byte UA_TYPE_GROUND_OBSTACLE = 14; //  Ground Obstacle.
        public const byte UA_TYPE_OTHER = 15; //  Other type of aircraft not listed earlier.
        //  [[[end]]] (sum: XI0V40EvGF)
        public Std.HeaderMsg header;
        public string id_or_mac;
        public byte id_type;
        public byte ua_type;
        public string uas_id;

        public OpenDroneIDBasicIDMsg()
        {
            this.header = new Std.HeaderMsg();
            this.id_or_mac = "";
            this.id_type = 0;
            this.ua_type = 0;
            this.uas_id = "";
        }

        public OpenDroneIDBasicIDMsg(Std.HeaderMsg header, string id_or_mac, byte id_type, byte ua_type, string uas_id)
        {
            this.header = header;
            this.id_or_mac = id_or_mac;
            this.id_type = id_type;
            this.ua_type = ua_type;
            this.uas_id = uas_id;
        }

        public static OpenDroneIDBasicIDMsg Deserialize(MessageDeserializer deserializer) => new OpenDroneIDBasicIDMsg(deserializer);

        private OpenDroneIDBasicIDMsg(MessageDeserializer deserializer)
        {
            this.header = Std.HeaderMsg.Deserialize(deserializer);
            deserializer.Read(out this.id_or_mac);
            deserializer.Read(out this.id_type);
            deserializer.Read(out this.ua_type);
            deserializer.Read(out this.uas_id);
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.Write(this.header);
            serializer.Write(this.id_or_mac);
            serializer.Write(this.id_type);
            serializer.Write(this.ua_type);
            serializer.Write(this.uas_id);
        }

        public override string ToString()
        {
            return "OpenDroneIDBasicIDMsg: " +
            "\nheader: " + header.ToString() +
            "\nid_or_mac: " + id_or_mac.ToString() +
            "\nid_type: " + id_type.ToString() +
            "\nua_type: " + ua_type.ToString() +
            "\nuas_id: " + uas_id.ToString();
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize);
        }
    }
}
