//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.Mavros
{
    [Serializable]
    public class GimbalDeviceAttitudeStatusMsg : Message
    {
        public const string k_RosMessageName = "mavros_msgs/GimbalDeviceAttitudeStatus";
        public override string RosMessageName => k_RosMessageName;

        //  MAVLink message: GIMBAL_DEVICE_ATTITUDE_STATUS
        //  https://mavlink.io/en/messages/common.html#GIMBAL_DEVICE_ATTITUDE_STATUS
        public Std.HeaderMsg header;
        public byte target_system;
        //  System ID
        public byte target_component;
        //  Component ID
        public ushort flags;
        //  Current gimbal flags set (bitwise) - See GIMBAL_DEVICE_FLAGS
        // GIMBAL_DEVICE_FLAGS
        public const ushort FLAGS_RETRACT = 1; //  Set to retracted safe position (no stabilization), takes presedence over all other flags.
        public const ushort FLAGS_NEUTRAL = 2; //  Set to neutral/default position, taking precedence over all other flags except RETRACT. Neutral is commonly forward-facing and horizontal (pitch=yaw=0) but may be any orientation.
        public const ushort FLAGS_ROLL_LOCK = 4; //  Lock roll angle to absolute angle relative to horizon (not relative to drone). This is generally the default with a stabilizing gimbal.
        public const ushort FLAGS_PITCH_LOCK = 8; //  Lock pitch angle to absolute angle relative to horizon (not relative to drone). This is generally the default.
        public const ushort FLAGS_YAW_LOCK = 16; //  Lock yaw angle to absolute angle relative to North (not relative to drone). If this flag is set, the quaternion is in the Earth frame with the x-axis pointing North (yaw absolute). If this flag is not set, the quaternion frame is in the Earth frame rotated so that the x-axis is pointing forward (yaw relative to vehicle).
        public Geometry.QuaternionMsg q;
        //  Quaternion, x, y, z, w (0 0 0 1 is the null-rotation, the frame is depends on whether the flag GIMBAL_DEVICE_FLAGS_YAW_LOCK is set)
        public float angular_velocity_x;
        //  X component of angular velocity (NaN if unknown)
        public float angular_velocity_y;
        //  Y component of angular velocity (NaN if unknown)
        public float angular_velocity_z;
        //  Z component of angular velocity (NaN if unknown)
        public uint failure_flags;
        //  Failure flags (0 for no failure) (bitwise) - See GIMBAL_DEVICE_ERROR_FLAGS
        // GIMBAL_DEVICE_ERROR_FLAGS
        public const uint ERROR_FLAGS_AT_ROLL_LIMIT = 1; //  Gimbal device is limited by hardware roll limit.
        public const uint ERROR_FLAGS_AT_PITCH_LIMIT = 2; //  Gimbal device is limited by hardware pitch limit.
        public const uint ERROR_FLAGS_AT_YAW_LIMIT = 4; //  Gimbal device is limited by hardware yaw limit.
        public const uint ERROR_FLAGS_ENCODER_ERROR = 8; //  There is an error with the gimbal encoders.
        public const uint ERROR_FLAGS_POWER_ERROR = 16; //  There is an error with the gimbal power source.
        public const uint ERROR_FLAGS_MOTOR_ERROR = 32; //  There is an error with the gimbal motor's.
        public const uint ERROR_FLAGS_SOFTWARE_ERROR = 64; //  There is an error with the gimbal's software.
        public const uint ERROR_FLAGS_COMMS_ERROR = 128; //  There is an error with the gimbal's communication.
        public const uint ERROR_FLAGS_CALIBRATION_RUNNING = 256; //  Gimbal is currently calibrating.

        public GimbalDeviceAttitudeStatusMsg()
        {
            this.header = new Std.HeaderMsg();
            this.target_system = 0;
            this.target_component = 0;
            this.flags = 0;
            this.q = new Geometry.QuaternionMsg();
            this.angular_velocity_x = 0.0f;
            this.angular_velocity_y = 0.0f;
            this.angular_velocity_z = 0.0f;
            this.failure_flags = 0;
        }

        public GimbalDeviceAttitudeStatusMsg(Std.HeaderMsg header, byte target_system, byte target_component, ushort flags, Geometry.QuaternionMsg q, float angular_velocity_x, float angular_velocity_y, float angular_velocity_z, uint failure_flags)
        {
            this.header = header;
            this.target_system = target_system;
            this.target_component = target_component;
            this.flags = flags;
            this.q = q;
            this.angular_velocity_x = angular_velocity_x;
            this.angular_velocity_y = angular_velocity_y;
            this.angular_velocity_z = angular_velocity_z;
            this.failure_flags = failure_flags;
        }

        public static GimbalDeviceAttitudeStatusMsg Deserialize(MessageDeserializer deserializer) => new GimbalDeviceAttitudeStatusMsg(deserializer);

        private GimbalDeviceAttitudeStatusMsg(MessageDeserializer deserializer)
        {
            this.header = Std.HeaderMsg.Deserialize(deserializer);
            deserializer.Read(out this.target_system);
            deserializer.Read(out this.target_component);
            deserializer.Read(out this.flags);
            this.q = Geometry.QuaternionMsg.Deserialize(deserializer);
            deserializer.Read(out this.angular_velocity_x);
            deserializer.Read(out this.angular_velocity_y);
            deserializer.Read(out this.angular_velocity_z);
            deserializer.Read(out this.failure_flags);
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.Write(this.header);
            serializer.Write(this.target_system);
            serializer.Write(this.target_component);
            serializer.Write(this.flags);
            serializer.Write(this.q);
            serializer.Write(this.angular_velocity_x);
            serializer.Write(this.angular_velocity_y);
            serializer.Write(this.angular_velocity_z);
            serializer.Write(this.failure_flags);
        }

        public override string ToString()
        {
            return "GimbalDeviceAttitudeStatusMsg: " +
            "\nheader: " + header.ToString() +
            "\ntarget_system: " + target_system.ToString() +
            "\ntarget_component: " + target_component.ToString() +
            "\nflags: " + flags.ToString() +
            "\nq: " + q.ToString() +
            "\nangular_velocity_x: " + angular_velocity_x.ToString() +
            "\nangular_velocity_y: " + angular_velocity_y.ToString() +
            "\nangular_velocity_z: " + angular_velocity_z.ToString() +
            "\nfailure_flags: " + failure_flags.ToString();
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize);
        }
    }
}
