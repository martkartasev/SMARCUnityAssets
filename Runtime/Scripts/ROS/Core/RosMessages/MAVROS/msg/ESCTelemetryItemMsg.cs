//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.Mavros
{
    [Serializable]
    public class ESCTelemetryItemMsg : Message
    {
        public const string k_RosMessageName = "mavros_msgs/ESCTelemetryItem";
        public override string RosMessageName => k_RosMessageName;

        //  APM ESC Telemetry as returned by BLHeli
        // 
        //  See:
        //  https://mavlink.io/en/messages/ardupilotmega.html#ESC_TELEMETRY_1_TO_4
        //  https://mavlink.io/en/messages/ardupilotmega.html#ESC_TELEMETRY_5_TO_8
        //  https://mavlink.io/en/messages/ardupilotmega.html#ESC_TELEMETRY_9_TO_12
        public Std.HeaderMsg header;
        public float temperature;
        //  deg C
        public float voltage;
        //  V
        public float current;
        //  A
        public float totalcurrent;
        //  Ah
        public int rpm;
        //  1/min
        public ushort count;
        //  count of telemetry packets

        public ESCTelemetryItemMsg()
        {
            this.header = new Std.HeaderMsg();
            this.temperature = 0.0f;
            this.voltage = 0.0f;
            this.current = 0.0f;
            this.totalcurrent = 0.0f;
            this.rpm = 0;
            this.count = 0;
        }

        public ESCTelemetryItemMsg(Std.HeaderMsg header, float temperature, float voltage, float current, float totalcurrent, int rpm, ushort count)
        {
            this.header = header;
            this.temperature = temperature;
            this.voltage = voltage;
            this.current = current;
            this.totalcurrent = totalcurrent;
            this.rpm = rpm;
            this.count = count;
        }

        public static ESCTelemetryItemMsg Deserialize(MessageDeserializer deserializer) => new ESCTelemetryItemMsg(deserializer);

        private ESCTelemetryItemMsg(MessageDeserializer deserializer)
        {
            this.header = Std.HeaderMsg.Deserialize(deserializer);
            deserializer.Read(out this.temperature);
            deserializer.Read(out this.voltage);
            deserializer.Read(out this.current);
            deserializer.Read(out this.totalcurrent);
            deserializer.Read(out this.rpm);
            deserializer.Read(out this.count);
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.Write(this.header);
            serializer.Write(this.temperature);
            serializer.Write(this.voltage);
            serializer.Write(this.current);
            serializer.Write(this.totalcurrent);
            serializer.Write(this.rpm);
            serializer.Write(this.count);
        }

        public override string ToString()
        {
            return "ESCTelemetryItemMsg: " +
            "\nheader: " + header.ToString() +
            "\ntemperature: " + temperature.ToString() +
            "\nvoltage: " + voltage.ToString() +
            "\ncurrent: " + current.ToString() +
            "\ntotalcurrent: " + totalcurrent.ToString() +
            "\nrpm: " + rpm.ToString() +
            "\ncount: " + count.ToString();
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize);
        }
    }
}
