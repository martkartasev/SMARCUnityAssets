//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.Mavros
{
    [Serializable]
    public class CameraImageCapturedMsg : Message
    {
        public const string k_RosMessageName = "mavros_msgs/CameraImageCaptured";
        public override string RosMessageName => k_RosMessageName;

        //  MAVLink message: CAMERA_IMAGE_CAPTURED
        //  https://mavlink.io/en/messages/common.html#CAMERA_IMAGE_CAPTURED
        public Std.HeaderMsg header;
        public Geometry.QuaternionMsg orientation;
        //  Quaternion of camera orientation (w, x, y, z order, zero-rotation is 1, 0, 0, 0)
        public Geographic.GeoPointMsg geo;
        public float relative_alt;
        //  mm	Altitude above ground
        public int image_index;
        //  Zero based index of this image (i.e. a new image will have index CAMERA_CAPTURE_STATUS.image count -1)
        public sbyte capture_result;
        //  Boolean indicating success (1) or failure (0) while capturing this image.
        public string file_url;
        // URL of image taken. Either local storage or http://foo.jpg if camera provides an HTTP interface.

        public CameraImageCapturedMsg()
        {
            this.header = new Std.HeaderMsg();
            this.orientation = new Geometry.QuaternionMsg();
            this.geo = new Geographic.GeoPointMsg();
            this.relative_alt = 0.0f;
            this.image_index = 0;
            this.capture_result = 0;
            this.file_url = "";
        }

        public CameraImageCapturedMsg(Std.HeaderMsg header, Geometry.QuaternionMsg orientation, Geographic.GeoPointMsg geo, float relative_alt, int image_index, sbyte capture_result, string file_url)
        {
            this.header = header;
            this.orientation = orientation;
            this.geo = geo;
            this.relative_alt = relative_alt;
            this.image_index = image_index;
            this.capture_result = capture_result;
            this.file_url = file_url;
        }

        public static CameraImageCapturedMsg Deserialize(MessageDeserializer deserializer) => new CameraImageCapturedMsg(deserializer);

        private CameraImageCapturedMsg(MessageDeserializer deserializer)
        {
            this.header = Std.HeaderMsg.Deserialize(deserializer);
            this.orientation = Geometry.QuaternionMsg.Deserialize(deserializer);
            this.geo = Geographic.GeoPointMsg.Deserialize(deserializer);
            deserializer.Read(out this.relative_alt);
            deserializer.Read(out this.image_index);
            deserializer.Read(out this.capture_result);
            deserializer.Read(out this.file_url);
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.Write(this.header);
            serializer.Write(this.orientation);
            serializer.Write(this.geo);
            serializer.Write(this.relative_alt);
            serializer.Write(this.image_index);
            serializer.Write(this.capture_result);
            serializer.Write(this.file_url);
        }

        public override string ToString()
        {
            return "CameraImageCapturedMsg: " +
            "\nheader: " + header.ToString() +
            "\norientation: " + orientation.ToString() +
            "\ngeo: " + geo.ToString() +
            "\nrelative_alt: " + relative_alt.ToString() +
            "\nimage_index: " + image_index.ToString() +
            "\ncapture_result: " + capture_result.ToString() +
            "\nfile_url: " + file_url.ToString();
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize);
        }
    }
}
