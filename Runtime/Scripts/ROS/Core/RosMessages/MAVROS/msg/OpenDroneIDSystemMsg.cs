//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.Mavros
{
    [Serializable]
    public class OpenDroneIDSystemMsg : Message
    {
        public const string k_RosMessageName = "mavros_msgs/OpenDroneIDSystem";
        public override string RosMessageName => k_RosMessageName;

        //  Remote ID message - System
        //  https://mavlink.io/en/messages/common.html#OPEN_DRONE_ID_SYSTEM
        //  [[[cog:
        //  import mavros_cog
        //  mavros_cog.idl_decl_enum('MAV_ODID_OPERATOR_LOCATION_TYPE', 'LOCATION_TYPE_')
        //  mavros_cog.idl_decl_enum('MAV_ODID_CLASSIFICATION_TYPE', 'CLASSIFICATION_TYPE_')
        //  ]]]
        //  MAV_ODID_OPERATOR_LOCATION_TYPE
        public const byte LOCATION_TYPE_TAKEOFF = 0; //  The location of the operator is the same as the take-off location.
        public const byte LOCATION_TYPE_LIVE_GNSS = 1; //  The location of the operator is based on live GNSS data.
        public const byte LOCATION_TYPE_FIXED = 2; //  The location of the operator is a fixed location.
        //  MAV_ODID_CLASSIFICATION_TYPE
        public const byte CLASSIFICATION_TYPE_UNDECLARED = 0; //  The classification type for the UA is undeclared.
        public const byte CLASSIFICATION_TYPE_EU = 1; //  The classification type for the UA follows EU (European Union) specifications.
        //  [[[end]]] (sum: UYA0B52q4Y)
        public Std.HeaderMsg header;
        public string id_or_mac;
        public byte operator_location_type;
        public byte classification_type;
        public int operator_latitude;
        public int operator_longitude;
        public ushort area_count;
        public ushort area_radius;
        public float area_ceiling;
        public float area_floor;
        public byte category_eu;
        public byte class_eu;
        public float operator_altitude_geo;

        public OpenDroneIDSystemMsg()
        {
            this.header = new Std.HeaderMsg();
            this.id_or_mac = "";
            this.operator_location_type = 0;
            this.classification_type = 0;
            this.operator_latitude = 0;
            this.operator_longitude = 0;
            this.area_count = 0;
            this.area_radius = 0;
            this.area_ceiling = 0.0f;
            this.area_floor = 0.0f;
            this.category_eu = 0;
            this.class_eu = 0;
            this.operator_altitude_geo = 0.0f;
        }

        public OpenDroneIDSystemMsg(Std.HeaderMsg header, string id_or_mac, byte operator_location_type, byte classification_type, int operator_latitude, int operator_longitude, ushort area_count, ushort area_radius, float area_ceiling, float area_floor, byte category_eu, byte class_eu, float operator_altitude_geo)
        {
            this.header = header;
            this.id_or_mac = id_or_mac;
            this.operator_location_type = operator_location_type;
            this.classification_type = classification_type;
            this.operator_latitude = operator_latitude;
            this.operator_longitude = operator_longitude;
            this.area_count = area_count;
            this.area_radius = area_radius;
            this.area_ceiling = area_ceiling;
            this.area_floor = area_floor;
            this.category_eu = category_eu;
            this.class_eu = class_eu;
            this.operator_altitude_geo = operator_altitude_geo;
        }

        public static OpenDroneIDSystemMsg Deserialize(MessageDeserializer deserializer) => new OpenDroneIDSystemMsg(deserializer);

        private OpenDroneIDSystemMsg(MessageDeserializer deserializer)
        {
            this.header = Std.HeaderMsg.Deserialize(deserializer);
            deserializer.Read(out this.id_or_mac);
            deserializer.Read(out this.operator_location_type);
            deserializer.Read(out this.classification_type);
            deserializer.Read(out this.operator_latitude);
            deserializer.Read(out this.operator_longitude);
            deserializer.Read(out this.area_count);
            deserializer.Read(out this.area_radius);
            deserializer.Read(out this.area_ceiling);
            deserializer.Read(out this.area_floor);
            deserializer.Read(out this.category_eu);
            deserializer.Read(out this.class_eu);
            deserializer.Read(out this.operator_altitude_geo);
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.Write(this.header);
            serializer.Write(this.id_or_mac);
            serializer.Write(this.operator_location_type);
            serializer.Write(this.classification_type);
            serializer.Write(this.operator_latitude);
            serializer.Write(this.operator_longitude);
            serializer.Write(this.area_count);
            serializer.Write(this.area_radius);
            serializer.Write(this.area_ceiling);
            serializer.Write(this.area_floor);
            serializer.Write(this.category_eu);
            serializer.Write(this.class_eu);
            serializer.Write(this.operator_altitude_geo);
        }

        public override string ToString()
        {
            return "OpenDroneIDSystemMsg: " +
            "\nheader: " + header.ToString() +
            "\nid_or_mac: " + id_or_mac.ToString() +
            "\noperator_location_type: " + operator_location_type.ToString() +
            "\nclassification_type: " + classification_type.ToString() +
            "\noperator_latitude: " + operator_latitude.ToString() +
            "\noperator_longitude: " + operator_longitude.ToString() +
            "\narea_count: " + area_count.ToString() +
            "\narea_radius: " + area_radius.ToString() +
            "\narea_ceiling: " + area_ceiling.ToString() +
            "\narea_floor: " + area_floor.ToString() +
            "\ncategory_eu: " + category_eu.ToString() +
            "\nclass_eu: " + class_eu.ToString() +
            "\noperator_altitude_geo: " + operator_altitude_geo.ToString();
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize);
        }
    }
}
