//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.Mavros
{
    [Serializable]
    public class VehicleInfoMsg : Message
    {
        public const string k_RosMessageName = "mavros_msgs/VehicleInfo";
        public override string RosMessageName => k_RosMessageName;

        //  Vehicle Info msg
        public Std.HeaderMsg header;
        public const byte HAVE_INFO_HEARTBEAT = 1;
        public const byte HAVE_INFO_AUTOPILOT_VERSION = 2;
        public byte available_info;
        //  Bitmap shows what info is available
        //  Vehicle address
        public byte sysid;
        //  SYSTEM ID
        public byte compid;
        //  COMPONENT ID
        //  -*- Heartbeat info -*-
        public byte autopilot;
        //  MAV_AUTOPILOT
        public byte type;
        //  MAV_TYPE
        public byte system_status;
        //  MAV_STATE
        public byte base_mode;
        public uint custom_mode;
        public string mode;
        //  MAV_MODE string
        public uint mode_id;
        //  MAV_MODE number
        //  -*- Autopilot version -*-
        public ulong capabilities;
        //  MAV_PROTOCOL_CAPABILITY
        public uint flight_sw_version;
        //  Firmware version number
        public uint middleware_sw_version;
        //  Middleware version number
        public uint os_sw_version;
        //  Operating system version number
        public uint board_version;
        //  HW / board version (last 8 bytes should be silicon ID, if any)
        public string flight_custom_version;
        //  Custom version field, commonly from the first 8 bytes of the git hash
        public ushort vendor_id;
        //  ID of the board vendor
        public ushort product_id;
        //  ID of the product
        public ulong uid;
        //  UID if provided by hardware

        public VehicleInfoMsg()
        {
            this.header = new Std.HeaderMsg();
            this.available_info = 0;
            this.sysid = 0;
            this.compid = 0;
            this.autopilot = 0;
            this.type = 0;
            this.system_status = 0;
            this.base_mode = 0;
            this.custom_mode = 0;
            this.mode = "";
            this.mode_id = 0;
            this.capabilities = 0;
            this.flight_sw_version = 0;
            this.middleware_sw_version = 0;
            this.os_sw_version = 0;
            this.board_version = 0;
            this.flight_custom_version = "";
            this.vendor_id = 0;
            this.product_id = 0;
            this.uid = 0;
        }

        public VehicleInfoMsg(Std.HeaderMsg header, byte available_info, byte sysid, byte compid, byte autopilot, byte type, byte system_status, byte base_mode, uint custom_mode, string mode, uint mode_id, ulong capabilities, uint flight_sw_version, uint middleware_sw_version, uint os_sw_version, uint board_version, string flight_custom_version, ushort vendor_id, ushort product_id, ulong uid)
        {
            this.header = header;
            this.available_info = available_info;
            this.sysid = sysid;
            this.compid = compid;
            this.autopilot = autopilot;
            this.type = type;
            this.system_status = system_status;
            this.base_mode = base_mode;
            this.custom_mode = custom_mode;
            this.mode = mode;
            this.mode_id = mode_id;
            this.capabilities = capabilities;
            this.flight_sw_version = flight_sw_version;
            this.middleware_sw_version = middleware_sw_version;
            this.os_sw_version = os_sw_version;
            this.board_version = board_version;
            this.flight_custom_version = flight_custom_version;
            this.vendor_id = vendor_id;
            this.product_id = product_id;
            this.uid = uid;
        }

        public static VehicleInfoMsg Deserialize(MessageDeserializer deserializer) => new VehicleInfoMsg(deserializer);

        private VehicleInfoMsg(MessageDeserializer deserializer)
        {
            this.header = Std.HeaderMsg.Deserialize(deserializer);
            deserializer.Read(out this.available_info);
            deserializer.Read(out this.sysid);
            deserializer.Read(out this.compid);
            deserializer.Read(out this.autopilot);
            deserializer.Read(out this.type);
            deserializer.Read(out this.system_status);
            deserializer.Read(out this.base_mode);
            deserializer.Read(out this.custom_mode);
            deserializer.Read(out this.mode);
            deserializer.Read(out this.mode_id);
            deserializer.Read(out this.capabilities);
            deserializer.Read(out this.flight_sw_version);
            deserializer.Read(out this.middleware_sw_version);
            deserializer.Read(out this.os_sw_version);
            deserializer.Read(out this.board_version);
            deserializer.Read(out this.flight_custom_version);
            deserializer.Read(out this.vendor_id);
            deserializer.Read(out this.product_id);
            deserializer.Read(out this.uid);
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.Write(this.header);
            serializer.Write(this.available_info);
            serializer.Write(this.sysid);
            serializer.Write(this.compid);
            serializer.Write(this.autopilot);
            serializer.Write(this.type);
            serializer.Write(this.system_status);
            serializer.Write(this.base_mode);
            serializer.Write(this.custom_mode);
            serializer.Write(this.mode);
            serializer.Write(this.mode_id);
            serializer.Write(this.capabilities);
            serializer.Write(this.flight_sw_version);
            serializer.Write(this.middleware_sw_version);
            serializer.Write(this.os_sw_version);
            serializer.Write(this.board_version);
            serializer.Write(this.flight_custom_version);
            serializer.Write(this.vendor_id);
            serializer.Write(this.product_id);
            serializer.Write(this.uid);
        }

        public override string ToString()
        {
            return "VehicleInfoMsg: " +
            "\nheader: " + header.ToString() +
            "\navailable_info: " + available_info.ToString() +
            "\nsysid: " + sysid.ToString() +
            "\ncompid: " + compid.ToString() +
            "\nautopilot: " + autopilot.ToString() +
            "\ntype: " + type.ToString() +
            "\nsystem_status: " + system_status.ToString() +
            "\nbase_mode: " + base_mode.ToString() +
            "\ncustom_mode: " + custom_mode.ToString() +
            "\nmode: " + mode.ToString() +
            "\nmode_id: " + mode_id.ToString() +
            "\ncapabilities: " + capabilities.ToString() +
            "\nflight_sw_version: " + flight_sw_version.ToString() +
            "\nmiddleware_sw_version: " + middleware_sw_version.ToString() +
            "\nos_sw_version: " + os_sw_version.ToString() +
            "\nboard_version: " + board_version.ToString() +
            "\nflight_custom_version: " + flight_custom_version.ToString() +
            "\nvendor_id: " + vendor_id.ToString() +
            "\nproduct_id: " + product_id.ToString() +
            "\nuid: " + uid.ToString();
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize);
        }
    }
}
