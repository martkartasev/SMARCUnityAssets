//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.Mavros
{
    [Serializable]
    public class MavlinkMsg : Message
    {
        public const string k_RosMessageName = "mavros_msgs/Mavlink";
        public override string RosMessageName => k_RosMessageName;

        //  Mavlink message transport type.
        // 
        //  Used to transport mavlink_message_t via ROS topic
        // 
        //  :framing_status:
        //        Frame decoding status: OK, CRC error, bad Signature (mavlink v2.0)
        //        You may simply drop all non valid messages.
        //        Used for GCS Bridge to transport unknown messages.
        // 
        //  :magic:
        //        STX byte, used to determine protocol version v1.0 or v2.0.
        // 
        //  Please use mavros_msgs::mavlink::convert() from <mavros_msgs/mavlink_convert.hpp>
        //  to convert between ROS and MAVLink message type
        //  mavlink_framing_t enum
        public const byte FRAMING_OK = 1;
        public const byte FRAMING_BAD_CRC = 2;
        public const byte FRAMING_BAD_SIGNATURE = 3;
        //  stx values
        public const byte MAVLINK_V10 = 254;
        public const byte MAVLINK_V20 = 253;
        public Std.HeaderMsg header;
        public byte framing_status;
        public byte magic;
        //  STX byte
        public byte len;
        public byte incompat_flags;
        public byte compat_flags;
        public byte seq;
        public byte sysid;
        public byte compid;
        public uint msgid;
        //  24-bit message id
        public ushort checksum;
        public ulong[] payload64;
        //  max size: (255+2+7)/8
        public byte[] signature;
        //  optional signature, max size: 13

        public MavlinkMsg()
        {
            this.header = new Std.HeaderMsg();
            this.framing_status = 0;
            this.magic = 0;
            this.len = 0;
            this.incompat_flags = 0;
            this.compat_flags = 0;
            this.seq = 0;
            this.sysid = 0;
            this.compid = 0;
            this.msgid = 0;
            this.checksum = 0;
            this.payload64 = new ulong[0];
            this.signature = new byte[0];
        }

        public MavlinkMsg(Std.HeaderMsg header, byte framing_status, byte magic, byte len, byte incompat_flags, byte compat_flags, byte seq, byte sysid, byte compid, uint msgid, ushort checksum, ulong[] payload64, byte[] signature)
        {
            this.header = header;
            this.framing_status = framing_status;
            this.magic = magic;
            this.len = len;
            this.incompat_flags = incompat_flags;
            this.compat_flags = compat_flags;
            this.seq = seq;
            this.sysid = sysid;
            this.compid = compid;
            this.msgid = msgid;
            this.checksum = checksum;
            this.payload64 = payload64;
            this.signature = signature;
        }

        public static MavlinkMsg Deserialize(MessageDeserializer deserializer) => new MavlinkMsg(deserializer);

        private MavlinkMsg(MessageDeserializer deserializer)
        {
            this.header = Std.HeaderMsg.Deserialize(deserializer);
            deserializer.Read(out this.framing_status);
            deserializer.Read(out this.magic);
            deserializer.Read(out this.len);
            deserializer.Read(out this.incompat_flags);
            deserializer.Read(out this.compat_flags);
            deserializer.Read(out this.seq);
            deserializer.Read(out this.sysid);
            deserializer.Read(out this.compid);
            deserializer.Read(out this.msgid);
            deserializer.Read(out this.checksum);
            deserializer.Read(out this.payload64, sizeof(ulong), deserializer.ReadLength());
            deserializer.Read(out this.signature, sizeof(byte), deserializer.ReadLength());
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.Write(this.header);
            serializer.Write(this.framing_status);
            serializer.Write(this.magic);
            serializer.Write(this.len);
            serializer.Write(this.incompat_flags);
            serializer.Write(this.compat_flags);
            serializer.Write(this.seq);
            serializer.Write(this.sysid);
            serializer.Write(this.compid);
            serializer.Write(this.msgid);
            serializer.Write(this.checksum);
            serializer.WriteLength(this.payload64);
            serializer.Write(this.payload64);
            serializer.WriteLength(this.signature);
            serializer.Write(this.signature);
        }

        public override string ToString()
        {
            return "MavlinkMsg: " +
            "\nheader: " + header.ToString() +
            "\nframing_status: " + framing_status.ToString() +
            "\nmagic: " + magic.ToString() +
            "\nlen: " + len.ToString() +
            "\nincompat_flags: " + incompat_flags.ToString() +
            "\ncompat_flags: " + compat_flags.ToString() +
            "\nseq: " + seq.ToString() +
            "\nsysid: " + sysid.ToString() +
            "\ncompid: " + compid.ToString() +
            "\nmsgid: " + msgid.ToString() +
            "\nchecksum: " + checksum.ToString() +
            "\npayload64: " + System.String.Join(", ", payload64.ToList()) +
            "\nsignature: " + System.String.Join(", ", signature.ToList());
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize);
        }
    }
}
