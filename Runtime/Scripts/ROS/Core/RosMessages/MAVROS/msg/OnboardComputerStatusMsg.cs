//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.Mavros
{
    [Serializable]
    public class OnboardComputerStatusMsg : Message
    {
        public const string k_RosMessageName = "mavros_msgs/OnboardComputerStatus";
        public override string RosMessageName => k_RosMessageName;

        //  Mavros message: ONBOARDCOMPUTERSTATUS
        public Std.HeaderMsg header;
        public byte component;
        //  See enum MAV_COMPONENT
        public uint uptime;
        //  [ms] Time since system boot
        public byte type;
        //  Type of the onboard computer: 0: Mission computer primary, 1: Mission computer backup 1, 2: Mission computer backup 2, 3: Compute node, 4-5: Compute spares, 6-9: Payload computers.
        public byte[] cpu_cores;
        //  CPU usage on the component in percent (100 - idle). A value of UINT8_MAX implies the field is unused.
        public byte[] cpu_combined;
        //  Combined CPU usage as the last 10 slices of 100 MS (a histogram). This allows to identify spikes in load that max out the system, but only for a short amount of time. A value of UINT8_MAX implies the field is unused
        public byte[] gpu_cores;
        //  GPU usage on the component in percent (100 - idle). A value of UINT8_MAX implies the field is unused
        public byte[] gpu_combined;
        //  Combined GPU usage as the last 10 slices of 100 MS (a histogram). This allows to identify spikes in load that max out the system, but only for a short amount of time. A value of UINT8_MAX implies the field is unused.
        public sbyte temperature_board;
        //  [degC] Temperature of the board. A value of INT8_MAX implies the field is unused.
        public sbyte[] temperature_core;
        //  [degC] Temperature of the CPU core. A value of INT8_MAX implies the field is unused.
        public short[] fan_speed;
        //  [rpm] Fan speeds. A value of INT16_MAX implies the field is unused.
        public uint ram_usage;
        //  [MiB] Amount of used RAM on the component system. A value of UINT32_MAX implies the field is unused.
        public uint ram_total;
        //  [MiB] Total amount of RAM on the component system. A value of UINT32_MAX implies the field is unused.
        public uint[] storage_type;
        //  Storage type: 0: HDD, 1: SSD, 2: EMMC, 3: SD card (non-removable), 4: SD card (removable). A value of UINT32_MAX implies the field is unused.
        public uint[] storage_usage;
        //  [MiB] Amount of used storage space on the component system. A value of UINT32_MAX implies the field is unused.
        public uint[] storage_total;
        //  [MiB] Total amount of storage space on the component system. A value of UINT32_MAX implies the field is unused.
        public uint[] link_type;
        //  Link type: 0-9: UART, 10-19: Wired network, 20-29: Wifi, 30-39: Point-to-point proprietary, 40-49: Mesh proprietary.
        public uint[] link_tx_rate;
        //  [KiB/s] Network traffic from the component system. A value of UINT32_MAX implies the field is unused.
        public uint[] link_rx_rate;
        //  [KiB/s] Network traffic to the component system. A value of UINT32_MAX implies the field is unused.
        public uint[] link_tx_max;
        //  [KiB/s] Network capacity from the component system. A value of UINT32_MAX implies the field is unused.
        public uint[] link_rx_max;
        //  [KiB/s] Network capacity to the component system. A value of UINT32_MAX implies the field is unused.

        public OnboardComputerStatusMsg()
        {
            this.header = new Std.HeaderMsg();
            this.component = 0;
            this.uptime = 0;
            this.type = 0;
            this.cpu_cores = new byte[8];
            this.cpu_combined = new byte[10];
            this.gpu_cores = new byte[4];
            this.gpu_combined = new byte[10];
            this.temperature_board = 0;
            this.temperature_core = new sbyte[8];
            this.fan_speed = new short[4];
            this.ram_usage = 0;
            this.ram_total = 0;
            this.storage_type = new uint[4];
            this.storage_usage = new uint[4];
            this.storage_total = new uint[4];
            this.link_type = new uint[6];
            this.link_tx_rate = new uint[6];
            this.link_rx_rate = new uint[6];
            this.link_tx_max = new uint[6];
            this.link_rx_max = new uint[6];
        }

        public OnboardComputerStatusMsg(Std.HeaderMsg header, byte component, uint uptime, byte type, byte[] cpu_cores, byte[] cpu_combined, byte[] gpu_cores, byte[] gpu_combined, sbyte temperature_board, sbyte[] temperature_core, short[] fan_speed, uint ram_usage, uint ram_total, uint[] storage_type, uint[] storage_usage, uint[] storage_total, uint[] link_type, uint[] link_tx_rate, uint[] link_rx_rate, uint[] link_tx_max, uint[] link_rx_max)
        {
            this.header = header;
            this.component = component;
            this.uptime = uptime;
            this.type = type;
            this.cpu_cores = cpu_cores;
            this.cpu_combined = cpu_combined;
            this.gpu_cores = gpu_cores;
            this.gpu_combined = gpu_combined;
            this.temperature_board = temperature_board;
            this.temperature_core = temperature_core;
            this.fan_speed = fan_speed;
            this.ram_usage = ram_usage;
            this.ram_total = ram_total;
            this.storage_type = storage_type;
            this.storage_usage = storage_usage;
            this.storage_total = storage_total;
            this.link_type = link_type;
            this.link_tx_rate = link_tx_rate;
            this.link_rx_rate = link_rx_rate;
            this.link_tx_max = link_tx_max;
            this.link_rx_max = link_rx_max;
        }

        public static OnboardComputerStatusMsg Deserialize(MessageDeserializer deserializer) => new OnboardComputerStatusMsg(deserializer);

        private OnboardComputerStatusMsg(MessageDeserializer deserializer)
        {
            this.header = Std.HeaderMsg.Deserialize(deserializer);
            deserializer.Read(out this.component);
            deserializer.Read(out this.uptime);
            deserializer.Read(out this.type);
            deserializer.Read(out this.cpu_cores, sizeof(byte), 8);
            deserializer.Read(out this.cpu_combined, sizeof(byte), 10);
            deserializer.Read(out this.gpu_cores, sizeof(byte), 4);
            deserializer.Read(out this.gpu_combined, sizeof(byte), 10);
            deserializer.Read(out this.temperature_board);
            deserializer.Read(out this.temperature_core, sizeof(sbyte), 8);
            deserializer.Read(out this.fan_speed, sizeof(short), 4);
            deserializer.Read(out this.ram_usage);
            deserializer.Read(out this.ram_total);
            deserializer.Read(out this.storage_type, sizeof(uint), 4);
            deserializer.Read(out this.storage_usage, sizeof(uint), 4);
            deserializer.Read(out this.storage_total, sizeof(uint), 4);
            deserializer.Read(out this.link_type, sizeof(uint), 6);
            deserializer.Read(out this.link_tx_rate, sizeof(uint), 6);
            deserializer.Read(out this.link_rx_rate, sizeof(uint), 6);
            deserializer.Read(out this.link_tx_max, sizeof(uint), 6);
            deserializer.Read(out this.link_rx_max, sizeof(uint), 6);
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.Write(this.header);
            serializer.Write(this.component);
            serializer.Write(this.uptime);
            serializer.Write(this.type);
            serializer.Write(this.cpu_cores);
            serializer.Write(this.cpu_combined);
            serializer.Write(this.gpu_cores);
            serializer.Write(this.gpu_combined);
            serializer.Write(this.temperature_board);
            serializer.Write(this.temperature_core);
            serializer.Write(this.fan_speed);
            serializer.Write(this.ram_usage);
            serializer.Write(this.ram_total);
            serializer.Write(this.storage_type);
            serializer.Write(this.storage_usage);
            serializer.Write(this.storage_total);
            serializer.Write(this.link_type);
            serializer.Write(this.link_tx_rate);
            serializer.Write(this.link_rx_rate);
            serializer.Write(this.link_tx_max);
            serializer.Write(this.link_rx_max);
        }

        public override string ToString()
        {
            return "OnboardComputerStatusMsg: " +
            "\nheader: " + header.ToString() +
            "\ncomponent: " + component.ToString() +
            "\nuptime: " + uptime.ToString() +
            "\ntype: " + type.ToString() +
            "\ncpu_cores: " + System.String.Join(", ", cpu_cores.ToList()) +
            "\ncpu_combined: " + System.String.Join(", ", cpu_combined.ToList()) +
            "\ngpu_cores: " + System.String.Join(", ", gpu_cores.ToList()) +
            "\ngpu_combined: " + System.String.Join(", ", gpu_combined.ToList()) +
            "\ntemperature_board: " + temperature_board.ToString() +
            "\ntemperature_core: " + System.String.Join(", ", temperature_core.ToList()) +
            "\nfan_speed: " + System.String.Join(", ", fan_speed.ToList()) +
            "\nram_usage: " + ram_usage.ToString() +
            "\nram_total: " + ram_total.ToString() +
            "\nstorage_type: " + System.String.Join(", ", storage_type.ToList()) +
            "\nstorage_usage: " + System.String.Join(", ", storage_usage.ToList()) +
            "\nstorage_total: " + System.String.Join(", ", storage_total.ToList()) +
            "\nlink_type: " + System.String.Join(", ", link_type.ToList()) +
            "\nlink_tx_rate: " + System.String.Join(", ", link_tx_rate.ToList()) +
            "\nlink_rx_rate: " + System.String.Join(", ", link_rx_rate.ToList()) +
            "\nlink_tx_max: " + System.String.Join(", ", link_tx_max.ToList()) +
            "\nlink_rx_max: " + System.String.Join(", ", link_rx_max.ToList());
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize);
        }
    }
}
