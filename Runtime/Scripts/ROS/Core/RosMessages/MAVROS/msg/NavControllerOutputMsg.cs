//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.Mavros
{
    [Serializable]
    public class NavControllerOutputMsg : Message
    {
        public const string k_RosMessageName = "mavros_msgs/NavControllerOutput";
        public override string RosMessageName => k_RosMessageName;

        //  https://mavlink.io/en/messages/common.html#NAV_CONTROLLER_OUTPUT
        public Std.HeaderMsg header;
        public float nav_roll;
        //  Current desired roll
        public float nav_pitch;
        //  Current desired pitch
        public short nav_bearing;
        //  Current desired heading
        public short target_bearing;
        //  Bearing to current waypoint/target
        public ushort wp_dist;
        //  Distance to active waypoint
        public float alt_error;
        //  Current altitude error
        public float aspd_error;
        //  Current airspeed error
        public float xtrack_error;
        //  Current crosstrack error on x-y plane

        public NavControllerOutputMsg()
        {
            this.header = new Std.HeaderMsg();
            this.nav_roll = 0.0f;
            this.nav_pitch = 0.0f;
            this.nav_bearing = 0;
            this.target_bearing = 0;
            this.wp_dist = 0;
            this.alt_error = 0.0f;
            this.aspd_error = 0.0f;
            this.xtrack_error = 0.0f;
        }

        public NavControllerOutputMsg(Std.HeaderMsg header, float nav_roll, float nav_pitch, short nav_bearing, short target_bearing, ushort wp_dist, float alt_error, float aspd_error, float xtrack_error)
        {
            this.header = header;
            this.nav_roll = nav_roll;
            this.nav_pitch = nav_pitch;
            this.nav_bearing = nav_bearing;
            this.target_bearing = target_bearing;
            this.wp_dist = wp_dist;
            this.alt_error = alt_error;
            this.aspd_error = aspd_error;
            this.xtrack_error = xtrack_error;
        }

        public static NavControllerOutputMsg Deserialize(MessageDeserializer deserializer) => new NavControllerOutputMsg(deserializer);

        private NavControllerOutputMsg(MessageDeserializer deserializer)
        {
            this.header = Std.HeaderMsg.Deserialize(deserializer);
            deserializer.Read(out this.nav_roll);
            deserializer.Read(out this.nav_pitch);
            deserializer.Read(out this.nav_bearing);
            deserializer.Read(out this.target_bearing);
            deserializer.Read(out this.wp_dist);
            deserializer.Read(out this.alt_error);
            deserializer.Read(out this.aspd_error);
            deserializer.Read(out this.xtrack_error);
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.Write(this.header);
            serializer.Write(this.nav_roll);
            serializer.Write(this.nav_pitch);
            serializer.Write(this.nav_bearing);
            serializer.Write(this.target_bearing);
            serializer.Write(this.wp_dist);
            serializer.Write(this.alt_error);
            serializer.Write(this.aspd_error);
            serializer.Write(this.xtrack_error);
        }

        public override string ToString()
        {
            return "NavControllerOutputMsg: " +
            "\nheader: " + header.ToString() +
            "\nnav_roll: " + nav_roll.ToString() +
            "\nnav_pitch: " + nav_pitch.ToString() +
            "\nnav_bearing: " + nav_bearing.ToString() +
            "\ntarget_bearing: " + target_bearing.ToString() +
            "\nwp_dist: " + wp_dist.ToString() +
            "\nalt_error: " + alt_error.ToString() +
            "\naspd_error: " + aspd_error.ToString() +
            "\nxtrack_error: " + xtrack_error.ToString();
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize);
        }
    }
}
