//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.Mavros
{
    [Serializable]
    public class HilStateQuaternionMsg : Message
    {
        public const string k_RosMessageName = "mavros_msgs/HilStateQuaternion";
        public override string RosMessageName => k_RosMessageName;

        //  HilStateQuaternion.msg
        // 
        //  ROS representation of MAVLink HIL_STATE_QUATERNION
        //  See mavlink message documentation here:
        //  https://mavlink.io/en/messages/common.html#HIL_STATE_QUATERNION
        public Std.HeaderMsg header;
        public Geometry.QuaternionMsg orientation;
        public Geometry.Vector3Msg angular_velocity;
        public Geometry.Vector3Msg linear_acceleration;
        public Geometry.Vector3Msg linear_velocity;
        public Geographic.GeoPointMsg geo;
        public float ind_airspeed;
        public float true_airspeed;

        public HilStateQuaternionMsg()
        {
            this.header = new Std.HeaderMsg();
            this.orientation = new Geometry.QuaternionMsg();
            this.angular_velocity = new Geometry.Vector3Msg();
            this.linear_acceleration = new Geometry.Vector3Msg();
            this.linear_velocity = new Geometry.Vector3Msg();
            this.geo = new Geographic.GeoPointMsg();
            this.ind_airspeed = 0.0f;
            this.true_airspeed = 0.0f;
        }

        public HilStateQuaternionMsg(Std.HeaderMsg header, Geometry.QuaternionMsg orientation, Geometry.Vector3Msg angular_velocity, Geometry.Vector3Msg linear_acceleration, Geometry.Vector3Msg linear_velocity, Geographic.GeoPointMsg geo, float ind_airspeed, float true_airspeed)
        {
            this.header = header;
            this.orientation = orientation;
            this.angular_velocity = angular_velocity;
            this.linear_acceleration = linear_acceleration;
            this.linear_velocity = linear_velocity;
            this.geo = geo;
            this.ind_airspeed = ind_airspeed;
            this.true_airspeed = true_airspeed;
        }

        public static HilStateQuaternionMsg Deserialize(MessageDeserializer deserializer) => new HilStateQuaternionMsg(deserializer);

        private HilStateQuaternionMsg(MessageDeserializer deserializer)
        {
            this.header = Std.HeaderMsg.Deserialize(deserializer);
            this.orientation = Geometry.QuaternionMsg.Deserialize(deserializer);
            this.angular_velocity = Geometry.Vector3Msg.Deserialize(deserializer);
            this.linear_acceleration = Geometry.Vector3Msg.Deserialize(deserializer);
            this.linear_velocity = Geometry.Vector3Msg.Deserialize(deserializer);
            this.geo = Geographic.GeoPointMsg.Deserialize(deserializer);
            deserializer.Read(out this.ind_airspeed);
            deserializer.Read(out this.true_airspeed);
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.Write(this.header);
            serializer.Write(this.orientation);
            serializer.Write(this.angular_velocity);
            serializer.Write(this.linear_acceleration);
            serializer.Write(this.linear_velocity);
            serializer.Write(this.geo);
            serializer.Write(this.ind_airspeed);
            serializer.Write(this.true_airspeed);
        }

        public override string ToString()
        {
            return "HilStateQuaternionMsg: " +
            "\nheader: " + header.ToString() +
            "\norientation: " + orientation.ToString() +
            "\nangular_velocity: " + angular_velocity.ToString() +
            "\nlinear_acceleration: " + linear_acceleration.ToString() +
            "\nlinear_velocity: " + linear_velocity.ToString() +
            "\ngeo: " + geo.ToString() +
            "\nind_airspeed: " + ind_airspeed.ToString() +
            "\ntrue_airspeed: " + true_airspeed.ToString();
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize);
        }
    }
}
