//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.Mavros
{
    [Serializable]
    public class GimbalManagerSetPitchyawMsg : Message
    {
        public const string k_RosMessageName = "mavros_msgs/GimbalManagerSetPitchyaw";
        public override string RosMessageName => k_RosMessageName;

        //  MAVLink message: GIMBAL_MANAGER_SET_PITCHYAW
        //  https://mavlink.io/en/messages/common.html#GIMBAL_MANAGER_SET_PITCHYAW
        //  Note that this message structure is identical also to GIMBAL_MANAGER_SET_MANUAL_CONTROL and is 
        //  reused as such by the plugin
        //  https://mavlink.io/en/messages/common.html#GIMBAL_MANAGER_SET_MANUAL_CONTROL
        public byte target_system;
        //  System ID
        public byte target_component;
        //  Component ID
        public uint flags;
        //  High level gimbal manager flags to use - See GIMBAL_MANAGER_FLAGS
        // GIMBAL_MANAGER_FLAGS
        public const uint GIMBAL_MANAGER_FLAGS_RETRACT = 1; //  Based on GIMBAL_DEVICE_FLAGS_RETRACT
        public const uint GIMBAL_MANAGER_FLAGS_NEUTRAL = 2; //  Based on GIMBAL_DEVICE_FLAGS_NEUTRAL
        public const uint GIMBAL_MANAGER_FLAGS_ROLL_LOCK = 4; //  Based on GIMBAL_DEVICE_FLAGS_ROLL_LOCK
        public const uint GIMBAL_MANAGER_FLAGS_PITCH_LOCK = 8; //  Based on GIMBAL_DEVICE_FLAGS_PITCH_LOCK
        public const uint GIMBAL_MANAGER_FLAGS_YAW_LOCK = 16; //  Based on GIMBAL_DEVICE_FLAGS_YAW_LOCK
        public byte gimbal_device_id;
        //  Component ID of gimbal device to address 
        //  (or 1-6 for non-MAVLink gimbal), 0 for all gimbal device
        //  components. Send command multiple times for more than
        //  one gimbal (but not all gimbals).  Default Mavlink gimbal 
        //  device ids: 154, 171-175
        public float pitch;
        //  Pitch angle (positive: up, negative: down, NaN to be ignored).
        public float yaw;
        //  Yaw angle (positive: to the right, negative: to the left, NaN to be ignored).
        public float pitch_rate;
        //  Pitch angular rate (positive: up, negative: down, NaN to be ignored).
        public float yaw_rate;
        //  Yaw angular rate (positive: to the right, negative: to the left, NaN to be ignored).

        public GimbalManagerSetPitchyawMsg()
        {
            this.target_system = 0;
            this.target_component = 0;
            this.flags = 0;
            this.gimbal_device_id = 0;
            this.pitch = 0.0f;
            this.yaw = 0.0f;
            this.pitch_rate = 0.0f;
            this.yaw_rate = 0.0f;
        }

        public GimbalManagerSetPitchyawMsg(byte target_system, byte target_component, uint flags, byte gimbal_device_id, float pitch, float yaw, float pitch_rate, float yaw_rate)
        {
            this.target_system = target_system;
            this.target_component = target_component;
            this.flags = flags;
            this.gimbal_device_id = gimbal_device_id;
            this.pitch = pitch;
            this.yaw = yaw;
            this.pitch_rate = pitch_rate;
            this.yaw_rate = yaw_rate;
        }

        public static GimbalManagerSetPitchyawMsg Deserialize(MessageDeserializer deserializer) => new GimbalManagerSetPitchyawMsg(deserializer);

        private GimbalManagerSetPitchyawMsg(MessageDeserializer deserializer)
        {
            deserializer.Read(out this.target_system);
            deserializer.Read(out this.target_component);
            deserializer.Read(out this.flags);
            deserializer.Read(out this.gimbal_device_id);
            deserializer.Read(out this.pitch);
            deserializer.Read(out this.yaw);
            deserializer.Read(out this.pitch_rate);
            deserializer.Read(out this.yaw_rate);
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.Write(this.target_system);
            serializer.Write(this.target_component);
            serializer.Write(this.flags);
            serializer.Write(this.gimbal_device_id);
            serializer.Write(this.pitch);
            serializer.Write(this.yaw);
            serializer.Write(this.pitch_rate);
            serializer.Write(this.yaw_rate);
        }

        public override string ToString()
        {
            return "GimbalManagerSetPitchyawMsg: " +
            "\ntarget_system: " + target_system.ToString() +
            "\ntarget_component: " + target_component.ToString() +
            "\nflags: " + flags.ToString() +
            "\ngimbal_device_id: " + gimbal_device_id.ToString() +
            "\npitch: " + pitch.ToString() +
            "\nyaw: " + yaw.ToString() +
            "\npitch_rate: " + pitch_rate.ToString() +
            "\nyaw_rate: " + yaw_rate.ToString();
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize);
        }
    }
}
