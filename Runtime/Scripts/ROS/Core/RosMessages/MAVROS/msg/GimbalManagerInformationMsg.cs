//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.Mavros
{
    [Serializable]
    public class GimbalManagerInformationMsg : Message
    {
        public const string k_RosMessageName = "mavros_msgs/GimbalManagerInformation";
        public override string RosMessageName => k_RosMessageName;

        //  MAVLink message: GIMBAL_MANAGER_INFORMATION
        //  https://mavlink.io/en/messages/common.html#GIMBAL_MANAGER_INFORMATION
        public Std.HeaderMsg header;
        public uint cap_flags;
        //  Bitmap of gimbal capability flags - see GIMBAL_MANAGER_CAP_FLAGS
        // GIMBAL_MANAGER_CAP_FLAGS
        public const uint CAP_FLAGS_HAS_RETRACT = 1; //  Based on GIMBAL_DEVICE_CAP_FLAGS_HAS_RETRACT.
        public const uint CAP_FLAGS_HAS_NEUTRAL = 2; //  Based on GIMBAL_DEVICE_CAP_FLAGS_HAS_NEUTRAL.
        public const uint CAP_FLAGS_HAS_ROLL_AXIS = 4; //  Based on GIMBAL_DEVICE_CAP_FLAGS_HAS_ROLL_AXIS.
        public const uint CAP_FLAGS_HAS_ROLL_FOLLOW = 8; //  Based on GIMBAL_DEVICE_CAP_FLAGS_HAS_ROLL_FOLLOW.
        public const uint CAP_FLAGS_HAS_ROLL_LOCK = 16; //  Based on GIMBAL_DEVICE_CAP_FLAGS_HAS_ROLL_LOCK.
        public const uint CAP_FLAGS_HAS_PITCH_AXIS = 32; //  Based on GIMBAL_DEVICE_CAP_FLAGS_HAS_PITCH_AXIS.
        public const uint CAP_FLAGS_HAS_PITCH_FOLLOW = 64; //  Based on GIMBAL_DEVICE_CAP_FLAGS_HAS_PITCH_FOLLOW.
        public const uint CAP_FLAGS_HAS_PITCH_LOCK = 128; //  Based on GIMBAL_DEVICE_CAP_FLAGS_HAS_PITCH_LOCK.
        public const uint CAP_FLAGS_HAS_YAW_AXIS = 256; //  Based on GIMBAL_DEVICE_CAP_FLAGS_HAS_YAW_AXIS.
        public const uint CAP_FLAGS_HAS_YAW_FOLLOW = 512; //  Based on GIMBAL_DEVICE_CAP_FLAGS_HAS_YAW_FOLLOW.
        public const uint CAP_FLAGS_HAS_YAW_LOCK = 1024; //  Based on GIMBAL_DEVICE_CAP_FLAGS_HAS_YAW_LOCK.
        public const uint CAP_FLAGS_SUPPORTS_INFINITE_YAW = 2048; //  Based on GIMBAL_DEVICE_CAP_FLAGS_SUPPORTS_INFINITE_YAW.
        public const uint CAP_FLAGS_CAN_POINT_LOCATION_LOCAL = 65536; //  Gimbal manager supports to point to a local position.
        public const uint CAP_FLAGS_CAN_POINT_LOCATION_GLOBAL = 131072; //  Gimbal manager supports to point to a global latitude, longitude, altitude position.
        public byte gimbal_device_id;
        //  Gimbal device ID that this gimbal manager is responsible for.
        public float roll_min;
        //  Minimum hardware roll angle (positive: rolling to the right, negative: rolling to the left)
        public float roll_max;
        //  Maximum hardware roll angle (positive: rolling to the right, negative: rolling to the left)
        public float pitch_min;
        //  Minimum pitch angle (positive: up, negative: down)
        public float pitch_max;
        //  Maximum pitch angle (positive: up, negative: down)
        public float yaw_min;
        //  Minimum yaw angle (positive: to the right, negative: to the left)
        public float yaw_max;
        //  Maximum yaw angle (positive: to the right, negative: to the left)

        public GimbalManagerInformationMsg()
        {
            this.header = new Std.HeaderMsg();
            this.cap_flags = 0;
            this.gimbal_device_id = 0;
            this.roll_min = 0.0f;
            this.roll_max = 0.0f;
            this.pitch_min = 0.0f;
            this.pitch_max = 0.0f;
            this.yaw_min = 0.0f;
            this.yaw_max = 0.0f;
        }

        public GimbalManagerInformationMsg(Std.HeaderMsg header, uint cap_flags, byte gimbal_device_id, float roll_min, float roll_max, float pitch_min, float pitch_max, float yaw_min, float yaw_max)
        {
            this.header = header;
            this.cap_flags = cap_flags;
            this.gimbal_device_id = gimbal_device_id;
            this.roll_min = roll_min;
            this.roll_max = roll_max;
            this.pitch_min = pitch_min;
            this.pitch_max = pitch_max;
            this.yaw_min = yaw_min;
            this.yaw_max = yaw_max;
        }

        public static GimbalManagerInformationMsg Deserialize(MessageDeserializer deserializer) => new GimbalManagerInformationMsg(deserializer);

        private GimbalManagerInformationMsg(MessageDeserializer deserializer)
        {
            this.header = Std.HeaderMsg.Deserialize(deserializer);
            deserializer.Read(out this.cap_flags);
            deserializer.Read(out this.gimbal_device_id);
            deserializer.Read(out this.roll_min);
            deserializer.Read(out this.roll_max);
            deserializer.Read(out this.pitch_min);
            deserializer.Read(out this.pitch_max);
            deserializer.Read(out this.yaw_min);
            deserializer.Read(out this.yaw_max);
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.Write(this.header);
            serializer.Write(this.cap_flags);
            serializer.Write(this.gimbal_device_id);
            serializer.Write(this.roll_min);
            serializer.Write(this.roll_max);
            serializer.Write(this.pitch_min);
            serializer.Write(this.pitch_max);
            serializer.Write(this.yaw_min);
            serializer.Write(this.yaw_max);
        }

        public override string ToString()
        {
            return "GimbalManagerInformationMsg: " +
            "\nheader: " + header.ToString() +
            "\ncap_flags: " + cap_flags.ToString() +
            "\ngimbal_device_id: " + gimbal_device_id.ToString() +
            "\nroll_min: " + roll_min.ToString() +
            "\nroll_max: " + roll_max.ToString() +
            "\npitch_min: " + pitch_min.ToString() +
            "\npitch_max: " + pitch_max.ToString() +
            "\nyaw_min: " + yaw_min.ToString() +
            "\nyaw_max: " + yaw_max.ToString();
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize);
        }
    }
}
