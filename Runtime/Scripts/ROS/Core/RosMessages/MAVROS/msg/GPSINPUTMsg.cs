//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.Mavros
{
    [Serializable]
    public class GPSINPUTMsg : Message
    {
        public const string k_RosMessageName = "mavros_msgs/GPSINPUT";
        public override string RosMessageName => k_RosMessageName;

        //  FCU GPS INPUT message for the gps_input plugin
        //  <a href="https://mavlink.io/en/messages/common.html#GPS_INPUT">mavlink GPS_INPUT message</a>.
        public Std.HeaderMsg header;
        // # GPS_FIX_TYPE enum
        public const byte GPS_FIX_TYPE_NO_GPS = 0; //  No GPS connected
        public const byte GPS_FIX_TYPE_NO_FIX = 1; //  No position information, GPS is connected
        public const byte GPS_FIX_TYPE_2D_FIX = 2; //  2D position
        public const byte GPS_FIX_TYPE_3D_FIX = 3; //  3D position
        public const byte GPS_FIX_TYPE_DGPS = 4; //  DGPS/SBAS aided 3D position
        public const byte GPS_FIX_TYPE_RTK_FLOATR = 5; //  TK float, 3D position
        public const byte GPS_FIX_TYPE_RTK_FIXEDR = 6; //  TK Fixed, 3D position
        public const byte GPS_FIX_TYPE_STATIC = 7; //  Static fixed, typically used for base stations
        public const byte GPS_FIX_TYPE_PPP = 8; //  PPP, 3D position
        public byte fix_type;
        //  [GPS_FIX_TYPE] GPS fix type
        public byte gps_id;
        //  ID of the GPS for multiple GPS inputs
        public ushort ignore_flags;
        //  Bitmap indicating which GPS input flags fields to ignore. All other fields must be provided.
        public uint time_week_ms;
        //  [ms] GPS time (from start of GPS week)
        public ushort time_week;
        //  GPS week number
        public int lat;
        //  [degE7] Latitude (WGS84, EGM96 ellipsoid)
        public int lon;
        //  [degE7] Longitude (WGS84, EGM96 ellipsoid)
        public float alt;
        //  [m] Altitude (MSL). Positive for up.
        public float hdop;
        //  [m] GPS HDOP horizontal dilution of position.
        public float vdop;
        //  [m] GPS VDOP vertical dilution of position
        public float vn;
        //  [m/s] GPS velocity in NORTH direction in earth-fixed NED frame
        public float ve;
        //  [m/s] GPS velocity in EAST direction in earth-fixed NED frame
        public float vd;
        //  [m/s] GPS velocity in DOWN direction in earth-fixed NED frame
        public float speed_accuracy;
        //  [m/s] GPS speed accuracy
        public float horiz_accuracy;
        //  [m] GPS horizontal accuracy
        public float vert_accuracy;
        //  [m] GPS vertical accuracy
        public byte satellites_visible;
        //  Number of satellites visible. If unknown, set to 255
        public ushort yaw;
        //  [cdeg] Yaw in earth frame from north.

        public GPSINPUTMsg()
        {
            this.header = new Std.HeaderMsg();
            this.fix_type = 0;
            this.gps_id = 0;
            this.ignore_flags = 0;
            this.time_week_ms = 0;
            this.time_week = 0;
            this.lat = 0;
            this.lon = 0;
            this.alt = 0.0f;
            this.hdop = 0.0f;
            this.vdop = 0.0f;
            this.vn = 0.0f;
            this.ve = 0.0f;
            this.vd = 0.0f;
            this.speed_accuracy = 0.0f;
            this.horiz_accuracy = 0.0f;
            this.vert_accuracy = 0.0f;
            this.satellites_visible = 0;
            this.yaw = 0;
        }

        public GPSINPUTMsg(Std.HeaderMsg header, byte fix_type, byte gps_id, ushort ignore_flags, uint time_week_ms, ushort time_week, int lat, int lon, float alt, float hdop, float vdop, float vn, float ve, float vd, float speed_accuracy, float horiz_accuracy, float vert_accuracy, byte satellites_visible, ushort yaw)
        {
            this.header = header;
            this.fix_type = fix_type;
            this.gps_id = gps_id;
            this.ignore_flags = ignore_flags;
            this.time_week_ms = time_week_ms;
            this.time_week = time_week;
            this.lat = lat;
            this.lon = lon;
            this.alt = alt;
            this.hdop = hdop;
            this.vdop = vdop;
            this.vn = vn;
            this.ve = ve;
            this.vd = vd;
            this.speed_accuracy = speed_accuracy;
            this.horiz_accuracy = horiz_accuracy;
            this.vert_accuracy = vert_accuracy;
            this.satellites_visible = satellites_visible;
            this.yaw = yaw;
        }

        public static GPSINPUTMsg Deserialize(MessageDeserializer deserializer) => new GPSINPUTMsg(deserializer);

        private GPSINPUTMsg(MessageDeserializer deserializer)
        {
            this.header = Std.HeaderMsg.Deserialize(deserializer);
            deserializer.Read(out this.fix_type);
            deserializer.Read(out this.gps_id);
            deserializer.Read(out this.ignore_flags);
            deserializer.Read(out this.time_week_ms);
            deserializer.Read(out this.time_week);
            deserializer.Read(out this.lat);
            deserializer.Read(out this.lon);
            deserializer.Read(out this.alt);
            deserializer.Read(out this.hdop);
            deserializer.Read(out this.vdop);
            deserializer.Read(out this.vn);
            deserializer.Read(out this.ve);
            deserializer.Read(out this.vd);
            deserializer.Read(out this.speed_accuracy);
            deserializer.Read(out this.horiz_accuracy);
            deserializer.Read(out this.vert_accuracy);
            deserializer.Read(out this.satellites_visible);
            deserializer.Read(out this.yaw);
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.Write(this.header);
            serializer.Write(this.fix_type);
            serializer.Write(this.gps_id);
            serializer.Write(this.ignore_flags);
            serializer.Write(this.time_week_ms);
            serializer.Write(this.time_week);
            serializer.Write(this.lat);
            serializer.Write(this.lon);
            serializer.Write(this.alt);
            serializer.Write(this.hdop);
            serializer.Write(this.vdop);
            serializer.Write(this.vn);
            serializer.Write(this.ve);
            serializer.Write(this.vd);
            serializer.Write(this.speed_accuracy);
            serializer.Write(this.horiz_accuracy);
            serializer.Write(this.vert_accuracy);
            serializer.Write(this.satellites_visible);
            serializer.Write(this.yaw);
        }

        public override string ToString()
        {
            return "GPSINPUTMsg: " +
            "\nheader: " + header.ToString() +
            "\nfix_type: " + fix_type.ToString() +
            "\ngps_id: " + gps_id.ToString() +
            "\nignore_flags: " + ignore_flags.ToString() +
            "\ntime_week_ms: " + time_week_ms.ToString() +
            "\ntime_week: " + time_week.ToString() +
            "\nlat: " + lat.ToString() +
            "\nlon: " + lon.ToString() +
            "\nalt: " + alt.ToString() +
            "\nhdop: " + hdop.ToString() +
            "\nvdop: " + vdop.ToString() +
            "\nvn: " + vn.ToString() +
            "\nve: " + ve.ToString() +
            "\nvd: " + vd.ToString() +
            "\nspeed_accuracy: " + speed_accuracy.ToString() +
            "\nhoriz_accuracy: " + horiz_accuracy.ToString() +
            "\nvert_accuracy: " + vert_accuracy.ToString() +
            "\nsatellites_visible: " + satellites_visible.ToString() +
            "\nyaw: " + yaw.ToString();
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize);
        }
    }
}
