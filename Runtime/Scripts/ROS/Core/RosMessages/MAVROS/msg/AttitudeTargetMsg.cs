//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.Mavros
{
    [Serializable]
    public class AttitudeTargetMsg : Message
    {
        public const string k_RosMessageName = "mavros_msgs/AttitudeTarget";
        public override string RosMessageName => k_RosMessageName;

        //  Message for SET_ATTITUDE_TARGET
        // 
        //  Some complex system requires all feautures that mavlink
        //  message provide. See issue #402, #418.
        public Std.HeaderMsg header;
        public byte type_mask;
        public const byte IGNORE_ROLL_RATE = 1; //  body_rate.x
        public const byte IGNORE_PITCH_RATE = 2; //  body_rate.y
        public const byte IGNORE_YAW_RATE = 4; //  body_rate.z
        public const byte IGNORE_THRUST = 64;
        public const byte IGNORE_ATTITUDE = 128; //  orientation field
        public Geometry.QuaternionMsg orientation;
        public Geometry.Vector3Msg body_rate;
        public float thrust;

        public AttitudeTargetMsg()
        {
            this.header = new Std.HeaderMsg();
            this.type_mask = 0;
            this.orientation = new Geometry.QuaternionMsg();
            this.body_rate = new Geometry.Vector3Msg();
            this.thrust = 0.0f;
        }

        public AttitudeTargetMsg(Std.HeaderMsg header, byte type_mask, Geometry.QuaternionMsg orientation, Geometry.Vector3Msg body_rate, float thrust)
        {
            this.header = header;
            this.type_mask = type_mask;
            this.orientation = orientation;
            this.body_rate = body_rate;
            this.thrust = thrust;
        }

        public static AttitudeTargetMsg Deserialize(MessageDeserializer deserializer) => new AttitudeTargetMsg(deserializer);

        private AttitudeTargetMsg(MessageDeserializer deserializer)
        {
            this.header = Std.HeaderMsg.Deserialize(deserializer);
            deserializer.Read(out this.type_mask);
            this.orientation = Geometry.QuaternionMsg.Deserialize(deserializer);
            this.body_rate = Geometry.Vector3Msg.Deserialize(deserializer);
            deserializer.Read(out this.thrust);
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.Write(this.header);
            serializer.Write(this.type_mask);
            serializer.Write(this.orientation);
            serializer.Write(this.body_rate);
            serializer.Write(this.thrust);
        }

        public override string ToString()
        {
            return "AttitudeTargetMsg: " +
            "\nheader: " + header.ToString() +
            "\ntype_mask: " + type_mask.ToString() +
            "\norientation: " + orientation.ToString() +
            "\nbody_rate: " + body_rate.ToString() +
            "\nthrust: " + thrust.ToString();
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize);
        }
    }
}
