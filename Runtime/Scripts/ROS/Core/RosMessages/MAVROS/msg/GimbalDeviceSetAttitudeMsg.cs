//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.Mavros
{
    [Serializable]
    public class GimbalDeviceSetAttitudeMsg : Message
    {
        public const string k_RosMessageName = "mavros_msgs/GimbalDeviceSetAttitude";
        public override string RosMessageName => k_RosMessageName;

        //  MAVLink message: GIMBAL_DEVICE_SET_ATTITUDE
        //  https://mavlink.io/en/messages/common.html#GIMBAL_DEVICE_SET_ATTITUDE
        public byte target_system;
        //  System ID
        public byte target_component;
        //  Component ID
        public ushort flags;
        //  Low level gimbal flags (bitwise) - See GIMBAL_DEVICE_FLAGS
        // GIMBAL_DEVICE_FLAGS
        public const ushort FLAGS_RETRACT = 1; //  Based on GIMBAL_DEVICE_FLAGS_RETRACT
        public const ushort FLAGS_NEUTRAL = 2; //  Based on GIMBAL_DEVICE_FLAGS_NEUTRAL
        public const ushort FLAGS_ROLL_LOCK = 4; //  Based on GIMBAL_DEVICE_FLAGS_ROLL_LOCK
        public const ushort FLAGS_PITCH_LOCK = 8; //  Based on GIMBAL_DEVICE_FLAGS_PITCH_LOCK
        public const ushort FLAGS_YAW_LOCK = 16; //  Based on GIMBAL_DEVICE_FLAGS_YAW_LOCK
        public Geometry.QuaternionMsg q;
        //  Quaternion, x, y, z, w (0 0 0 1 is the null-rotation, the frame is depends on whether the flag GIMBAL_DEVICE_FLAGS_YAW_LOCK is set)
        public float angular_velocity_x;
        //  X component of angular velocity, positive is rolling to the right, NaN to be ignored.
        public float angular_velocity_y;
        //  Y component of angular velocity, positive is pitching up, NaN to be ignored.
        public float angular_velocity_z;
        //  Z component of angular velocity, positive is yawing to the right, NaN to be ignored.

        public GimbalDeviceSetAttitudeMsg()
        {
            this.target_system = 0;
            this.target_component = 0;
            this.flags = 0;
            this.q = new Geometry.QuaternionMsg();
            this.angular_velocity_x = 0.0f;
            this.angular_velocity_y = 0.0f;
            this.angular_velocity_z = 0.0f;
        }

        public GimbalDeviceSetAttitudeMsg(byte target_system, byte target_component, ushort flags, Geometry.QuaternionMsg q, float angular_velocity_x, float angular_velocity_y, float angular_velocity_z)
        {
            this.target_system = target_system;
            this.target_component = target_component;
            this.flags = flags;
            this.q = q;
            this.angular_velocity_x = angular_velocity_x;
            this.angular_velocity_y = angular_velocity_y;
            this.angular_velocity_z = angular_velocity_z;
        }

        public static GimbalDeviceSetAttitudeMsg Deserialize(MessageDeserializer deserializer) => new GimbalDeviceSetAttitudeMsg(deserializer);

        private GimbalDeviceSetAttitudeMsg(MessageDeserializer deserializer)
        {
            deserializer.Read(out this.target_system);
            deserializer.Read(out this.target_component);
            deserializer.Read(out this.flags);
            this.q = Geometry.QuaternionMsg.Deserialize(deserializer);
            deserializer.Read(out this.angular_velocity_x);
            deserializer.Read(out this.angular_velocity_y);
            deserializer.Read(out this.angular_velocity_z);
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.Write(this.target_system);
            serializer.Write(this.target_component);
            serializer.Write(this.flags);
            serializer.Write(this.q);
            serializer.Write(this.angular_velocity_x);
            serializer.Write(this.angular_velocity_y);
            serializer.Write(this.angular_velocity_z);
        }

        public override string ToString()
        {
            return "GimbalDeviceSetAttitudeMsg: " +
            "\ntarget_system: " + target_system.ToString() +
            "\ntarget_component: " + target_component.ToString() +
            "\nflags: " + flags.ToString() +
            "\nq: " + q.ToString() +
            "\nangular_velocity_x: " + angular_velocity_x.ToString() +
            "\nangular_velocity_y: " + angular_velocity_y.ToString() +
            "\nangular_velocity_z: " + angular_velocity_z.ToString();
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize);
        }
    }
}
