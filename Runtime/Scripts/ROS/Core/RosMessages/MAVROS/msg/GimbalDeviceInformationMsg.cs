//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.Mavros
{
    [Serializable]
    public class GimbalDeviceInformationMsg : Message
    {
        public const string k_RosMessageName = "mavros_msgs/GimbalDeviceInformation";
        public override string RosMessageName => k_RosMessageName;

        //  MAVLink message: GIMBAL_DEVICE_INFORMATION
        //  https://mavlink.io/en/messages/common.html#GIMBAL_DEVICE_INFORMATION
        public Std.HeaderMsg header;
        public string vendor_name;
        //  Name of the gimbal vendor.
        public string model_name;
        //  Name of the gimbal model.
        public string custom_name;
        //  Custom name of the gimbal given to it by the user.
        public uint firmware_version;
        //  Version of the gimbal firmware, encoded as: (Dev & 0xff) << 24 | (Patch & 0xff) << 16 | (Minor & 0xff) << 8 | (Major & 0xff).
        public uint hardware_version;
        //  Version of the gimbal hardware, encoded as: (Dev & 0xff) << 24 | (Patch & 0xff) << 16 | (Minor & 0xff) << 8 | (Major & 0xff).
        public ulong uid;
        //  UID of gimbal hardware (0 if unknown).
        public uint cap_flags;
        //  Bitmap of gimbal capability flags - see GIMBAL_DEVICE_CAP_FLAGS
        // GIMBAL_DEVICE_CAP_FLAGS
        public const uint CAP_FLAGS_HAS_RETRACT = 1; //  Gimbal device supports a retracted position
        public const uint CAP_FLAGS_HAS_NEUTRAL = 2; //  Gimbal device supports a horizontal, forward looking position, stabilized
        public const uint CAP_FLAGS_HAS_ROLL_AXIS = 4; //  Gimbal device supports rotating around roll axis.
        public const uint CAP_FLAGS_HAS_ROLL_FOLLOW = 8; //  Gimbal device supports to follow a roll angle relative to the vehicle
        public const uint CAP_FLAGS_HAS_ROLL_LOCK = 16; //  Gimbal device supports locking to an roll angle (generally that's the default with roll stabilized)
        public const uint CAP_FLAGS_HAS_PITCH_AXIS = 32; //  Gimbal device supports rotating around pitch axis.
        public const uint CAP_FLAGS_HAS_PITCH_FOLLOW = 64; //  Gimbal device supports to follow a pitch angle relative to the vehicle
        public const uint CAP_FLAGS_HAS_PITCH_LOCK = 128; //  Gimbal device supports locking to an pitch angle (generally that's the default with pitch stabilized)
        public const uint CAP_FLAGS_HAS_YAW_AXIS = 256; //  Gimbal device supports rotating around yaw axis.
        public const uint CAP_FLAGS_HAS_YAW_FOLLOW = 512; //  Gimbal device supports to follow a yaw angle relative to the vehicle (generally that's the default)
        public const uint CAP_FLAGS_HAS_YAW_LOCK = 1024; //  Gimbal device supports locking to an absolute heading (often this is an option available)
        public const uint CAP_FLAGS_SUPPORTS_INFINITE_YAW = 2048; //  Gimbal device supports yawing/panning infinetely (e.g. using slip disk).
        public ushort custom_cap_flags;
        //  Bitmap for use for gimbal-specific capability flags.
        public float roll_min;
        //  Minimum hardware roll angle (positive: rolling to the right, negative: rolling to the left)
        public float roll_max;
        //  Maximum hardware roll angle (positive: rolling to the right, negative: rolling to the left)
        public float pitch_min;
        //  Minimum pitch angle (positive: up, negative: down)
        public float pitch_max;
        //  Maximum pitch angle (positive: up, negative: down)
        public float yaw_min;
        //  Minimum yaw angle (positive: to the right, negative: to the left)
        public float yaw_max;
        //  Maximum yaw angle (positive: to the right, negative: to the left)

        public GimbalDeviceInformationMsg()
        {
            this.header = new Std.HeaderMsg();
            this.vendor_name = "";
            this.model_name = "";
            this.custom_name = "";
            this.firmware_version = 0;
            this.hardware_version = 0;
            this.uid = 0;
            this.cap_flags = 0;
            this.custom_cap_flags = 0;
            this.roll_min = 0.0f;
            this.roll_max = 0.0f;
            this.pitch_min = 0.0f;
            this.pitch_max = 0.0f;
            this.yaw_min = 0.0f;
            this.yaw_max = 0.0f;
        }

        public GimbalDeviceInformationMsg(Std.HeaderMsg header, string vendor_name, string model_name, string custom_name, uint firmware_version, uint hardware_version, ulong uid, uint cap_flags, ushort custom_cap_flags, float roll_min, float roll_max, float pitch_min, float pitch_max, float yaw_min, float yaw_max)
        {
            this.header = header;
            this.vendor_name = vendor_name;
            this.model_name = model_name;
            this.custom_name = custom_name;
            this.firmware_version = firmware_version;
            this.hardware_version = hardware_version;
            this.uid = uid;
            this.cap_flags = cap_flags;
            this.custom_cap_flags = custom_cap_flags;
            this.roll_min = roll_min;
            this.roll_max = roll_max;
            this.pitch_min = pitch_min;
            this.pitch_max = pitch_max;
            this.yaw_min = yaw_min;
            this.yaw_max = yaw_max;
        }

        public static GimbalDeviceInformationMsg Deserialize(MessageDeserializer deserializer) => new GimbalDeviceInformationMsg(deserializer);

        private GimbalDeviceInformationMsg(MessageDeserializer deserializer)
        {
            this.header = Std.HeaderMsg.Deserialize(deserializer);
            deserializer.Read(out this.vendor_name);
            deserializer.Read(out this.model_name);
            deserializer.Read(out this.custom_name);
            deserializer.Read(out this.firmware_version);
            deserializer.Read(out this.hardware_version);
            deserializer.Read(out this.uid);
            deserializer.Read(out this.cap_flags);
            deserializer.Read(out this.custom_cap_flags);
            deserializer.Read(out this.roll_min);
            deserializer.Read(out this.roll_max);
            deserializer.Read(out this.pitch_min);
            deserializer.Read(out this.pitch_max);
            deserializer.Read(out this.yaw_min);
            deserializer.Read(out this.yaw_max);
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.Write(this.header);
            serializer.Write(this.vendor_name);
            serializer.Write(this.model_name);
            serializer.Write(this.custom_name);
            serializer.Write(this.firmware_version);
            serializer.Write(this.hardware_version);
            serializer.Write(this.uid);
            serializer.Write(this.cap_flags);
            serializer.Write(this.custom_cap_flags);
            serializer.Write(this.roll_min);
            serializer.Write(this.roll_max);
            serializer.Write(this.pitch_min);
            serializer.Write(this.pitch_max);
            serializer.Write(this.yaw_min);
            serializer.Write(this.yaw_max);
        }

        public override string ToString()
        {
            return "GimbalDeviceInformationMsg: " +
            "\nheader: " + header.ToString() +
            "\nvendor_name: " + vendor_name.ToString() +
            "\nmodel_name: " + model_name.ToString() +
            "\ncustom_name: " + custom_name.ToString() +
            "\nfirmware_version: " + firmware_version.ToString() +
            "\nhardware_version: " + hardware_version.ToString() +
            "\nuid: " + uid.ToString() +
            "\ncap_flags: " + cap_flags.ToString() +
            "\ncustom_cap_flags: " + custom_cap_flags.ToString() +
            "\nroll_min: " + roll_min.ToString() +
            "\nroll_max: " + roll_max.ToString() +
            "\npitch_min: " + pitch_min.ToString() +
            "\npitch_max: " + pitch_max.ToString() +
            "\nyaw_min: " + yaw_min.ToString() +
            "\nyaw_max: " + yaw_max.ToString();
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize);
        }
    }
}
