//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.Mavros
{
    [Serializable]
    public class TrajectoryMsg : Message
    {
        public const string k_RosMessageName = "mavros_msgs/Trajectory";
        public override string RosMessageName => k_RosMessageName;

        //  MAVLink message: TRAJECTORY
        //  https://mavlink.io/en/messages/common.html#TRAJECTORY
        public Std.HeaderMsg header;
        public byte type;
        //  See enum MAV_TRAJECTORY_REPRESENTATION.
        public const byte MAV_TRAJECTORY_REPRESENTATION_WAYPOINTS = 0;
        public const byte MAV_TRAJECTORY_REPRESENTATION_BEZIER = 1;
        public PositionTargetMsg point_1;
        public PositionTargetMsg point_2;
        public PositionTargetMsg point_3;
        public PositionTargetMsg point_4;
        public PositionTargetMsg point_5;
        public byte[] point_valid;
        //  States if respective point is valid.
        public ushort[] command;
        //  MAV_CMD associated with each point. UINT16_MAX if unused.
        public float[] time_horizon;
        //  if type MAV_TRAJECTORY_REPRESENTATION_BEZIER, it represents the time horizon for each point, otherwise set to NaN

        public TrajectoryMsg()
        {
            this.header = new Std.HeaderMsg();
            this.type = 0;
            this.point_1 = new PositionTargetMsg();
            this.point_2 = new PositionTargetMsg();
            this.point_3 = new PositionTargetMsg();
            this.point_4 = new PositionTargetMsg();
            this.point_5 = new PositionTargetMsg();
            this.point_valid = new byte[5];
            this.command = new ushort[5];
            this.time_horizon = new float[5];
        }

        public TrajectoryMsg(Std.HeaderMsg header, byte type, PositionTargetMsg point_1, PositionTargetMsg point_2, PositionTargetMsg point_3, PositionTargetMsg point_4, PositionTargetMsg point_5, byte[] point_valid, ushort[] command, float[] time_horizon)
        {
            this.header = header;
            this.type = type;
            this.point_1 = point_1;
            this.point_2 = point_2;
            this.point_3 = point_3;
            this.point_4 = point_4;
            this.point_5 = point_5;
            this.point_valid = point_valid;
            this.command = command;
            this.time_horizon = time_horizon;
        }

        public static TrajectoryMsg Deserialize(MessageDeserializer deserializer) => new TrajectoryMsg(deserializer);

        private TrajectoryMsg(MessageDeserializer deserializer)
        {
            this.header = Std.HeaderMsg.Deserialize(deserializer);
            deserializer.Read(out this.type);
            this.point_1 = PositionTargetMsg.Deserialize(deserializer);
            this.point_2 = PositionTargetMsg.Deserialize(deserializer);
            this.point_3 = PositionTargetMsg.Deserialize(deserializer);
            this.point_4 = PositionTargetMsg.Deserialize(deserializer);
            this.point_5 = PositionTargetMsg.Deserialize(deserializer);
            deserializer.Read(out this.point_valid, sizeof(byte), 5);
            deserializer.Read(out this.command, sizeof(ushort), 5);
            deserializer.Read(out this.time_horizon, sizeof(float), 5);
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.Write(this.header);
            serializer.Write(this.type);
            serializer.Write(this.point_1);
            serializer.Write(this.point_2);
            serializer.Write(this.point_3);
            serializer.Write(this.point_4);
            serializer.Write(this.point_5);
            serializer.Write(this.point_valid);
            serializer.Write(this.command);
            serializer.Write(this.time_horizon);
        }

        public override string ToString()
        {
            return "TrajectoryMsg: " +
            "\nheader: " + header.ToString() +
            "\ntype: " + type.ToString() +
            "\npoint_1: " + point_1.ToString() +
            "\npoint_2: " + point_2.ToString() +
            "\npoint_3: " + point_3.ToString() +
            "\npoint_4: " + point_4.ToString() +
            "\npoint_5: " + point_5.ToString() +
            "\npoint_valid: " + System.String.Join(", ", point_valid.ToList()) +
            "\ncommand: " + System.String.Join(", ", command.ToList()) +
            "\ntime_horizon: " + System.String.Join(", ", time_horizon.ToList());
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize);
        }
    }
}
