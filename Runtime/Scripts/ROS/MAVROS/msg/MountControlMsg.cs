//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.Mavros
{
    [Serializable]
    public class MountControlMsg : Message
    {
        public const string k_RosMessageName = "mavros_msgs/MountControl";
        public override string RosMessageName => k_RosMessageName;

        //  MAVLink message: DO_MOUNT_CONTROL
        //  https://mavlink.io/en/messages/common.html#MAV_CMD_DO_MOUNT_CONTROL
        public Std.HeaderMsg header;
        public byte mode;
        //  See enum MAV_MOUNT_MODE.
        public const byte MAV_MOUNT_MODE_RETRACT = 0;
        public const byte MAV_MOUNT_MODE_NEUTRAL = 1;
        public const byte MAV_MOUNT_MODE_MAVLINK_TARGETING = 2;
        public const byte MAV_MOUNT_MODE_RC_TARGETING = 3;
        public const byte MAV_MOUNT_MODE_GPS_POINT = 4;
        public float pitch;
        //  pitch degrees or degrees/second depending on mount mode.
        public float roll;
        //  roll degrees or degrees/second depending on mount mode.
        public float yaw;
        //  yaw degrees or degrees/second depending on mount mode.
        public float altitude;
        //  altitude depending on mount mode.
        public float latitude;
        //  latitude in degrees * 1E7, set if appropriate mount mode.
        public float longitude;
        //  longitude in degrees * 1E7, set if appropriate mount mode.

        public MountControlMsg()
        {
            this.header = new Std.HeaderMsg();
            this.mode = 0;
            this.pitch = 0.0f;
            this.roll = 0.0f;
            this.yaw = 0.0f;
            this.altitude = 0.0f;
            this.latitude = 0.0f;
            this.longitude = 0.0f;
        }

        public MountControlMsg(Std.HeaderMsg header, byte mode, float pitch, float roll, float yaw, float altitude, float latitude, float longitude)
        {
            this.header = header;
            this.mode = mode;
            this.pitch = pitch;
            this.roll = roll;
            this.yaw = yaw;
            this.altitude = altitude;
            this.latitude = latitude;
            this.longitude = longitude;
        }

        public static MountControlMsg Deserialize(MessageDeserializer deserializer) => new MountControlMsg(deserializer);

        private MountControlMsg(MessageDeserializer deserializer)
        {
            this.header = Std.HeaderMsg.Deserialize(deserializer);
            deserializer.Read(out this.mode);
            deserializer.Read(out this.pitch);
            deserializer.Read(out this.roll);
            deserializer.Read(out this.yaw);
            deserializer.Read(out this.altitude);
            deserializer.Read(out this.latitude);
            deserializer.Read(out this.longitude);
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.Write(this.header);
            serializer.Write(this.mode);
            serializer.Write(this.pitch);
            serializer.Write(this.roll);
            serializer.Write(this.yaw);
            serializer.Write(this.altitude);
            serializer.Write(this.latitude);
            serializer.Write(this.longitude);
        }

        public override string ToString()
        {
            return "MountControlMsg: " +
            "\nheader: " + header.ToString() +
            "\nmode: " + mode.ToString() +
            "\npitch: " + pitch.ToString() +
            "\nroll: " + roll.ToString() +
            "\nyaw: " + yaw.ToString() +
            "\naltitude: " + altitude.ToString() +
            "\nlatitude: " + latitude.ToString() +
            "\nlongitude: " + longitude.ToString();
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize);
        }
    }
}
