//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.Mavros
{
    [Serializable]
    public class LandingTargetMsg : Message
    {
        public const string k_RosMessageName = "mavros_msgs/LandingTarget";
        public override string RosMessageName => k_RosMessageName;

        //  MAVLink message: LANDING_TARGET
        //  https://mavlink.io/en/messages/common.html
        public Std.HeaderMsg header;
        // # MAV_FRAME enum
        public const byte GLOBAL = 0; //  Global coordinate frame, WGS84 coordinate system. First value / x: latitude, second value / y: longitude, third value / z: positive altitude over mean sea level (MSL)
        public const byte LOCAL_NED = 2; //  Local coordinate frame, Z-up (x: north, y: east, z: down).
        public const byte MISSION = 3; //  NOT a coordinate frame, indicates a mission command.
        public const byte GLOBAL_RELATIVE_ALT = 4; //  Global coordinate frame, WGS84 coordinate system, relative altitude over ground with respect to the home position. First value / x: latitude, second value / y: longitude, third value / z: positive altitude with 0 being at the altitude of the home location.
        public const byte LOCAL_ENU = 5; //  Local coordinate frame, Z-down (x: east, y: north, z: up)
        public const byte GLOBAL_INT = 6; //  Global coordinate frame, WGS84 coordinate system. First value / x: latitude in degrees*1.0e-7, second value / y: longitude in degrees*1.0e-7, third value / z: positive altitude over mean sea level (MSL)
        public const byte GLOBAL_RELATIVE_ALT_INT = 7; //  Global coordinate frame, WGS84 coordinate system, relative altitude over ground with respect to the home position. First value / x: latitude in degrees*10e-7, second value / y: longitude in degrees*10e-7, third value / z: positive altitude with 0 being at the altitude of the home location.
        public const byte LOCAL_OFFSET_NED = 8; //  Offset to the current local frame. Anything expressed in this frame should be added to the current local frame position.
        public const byte BODY_NED = 9; //  Setpoint in body NED frame. This makes sense if all position control is externalized - e.g. useful to command 2 m/s^2 acceleration to the right.
        public const byte BODY_OFFSET_NED = 10; //  Offset in body NED frame. This makes sense if adding setpoints to the current flight path, to avoid an obstacle - e.g. useful to command 2 m/s^2 acceleration to the east.
        public const byte GLOBAL_TERRAIN_ALT = 11; //  Global coordinate frame with above terrain level altitude. WGS84 coordinate system, relative altitude over terrain with respect to the waypoint coordinate. First value / x: latitude in degrees, second value / y: longitude in degrees, third value / z: positive altitude in meters with 0 being at ground level in terrain model.
        public const byte GLOBAL_TERRAIN_ALT_INT = 12; //  Global coordinate frame with above terrain level altitude. WGS84 coordinate system, relative altitude over terrain with respect to the waypoint coordinate. First value / x: latitude in degrees*10e-7, second value / y: longitude in degrees*10e-7, third value / z: positive altitude in meters with 0 being at ground level in terrain model.
        // # LANDING_TARGET_TYPE enum
        public const byte LIGHT_BEACON = 0; //  Landing target signaled by light beacon (ex: IR-LOCK)
        public const byte RADIO_BEACON = 1; //  Landing target signaled by radio beacon (ex: ILS, NDB)
        public const byte VISION_FIDUCIAL = 2; //  Landing target represented by a fiducial marker (ex: ARTag)
        public const byte VISION_OTHER = 3; //  Landing target represented by a pre-defined visual shape/feature (ex: X-marker, H-marker, square)
        public byte target_num;
        public byte frame;
        public float[] angle;
        public float distance;
        public float[] size;
        public Geometry.PoseMsg pose;
        public byte type;

        public LandingTargetMsg()
        {
            this.header = new Std.HeaderMsg();
            this.target_num = 0;
            this.frame = 0;
            this.angle = new float[2];
            this.distance = 0.0f;
            this.size = new float[2];
            this.pose = new Geometry.PoseMsg();
            this.type = 0;
        }

        public LandingTargetMsg(Std.HeaderMsg header, byte target_num, byte frame, float[] angle, float distance, float[] size, Geometry.PoseMsg pose, byte type)
        {
            this.header = header;
            this.target_num = target_num;
            this.frame = frame;
            this.angle = angle;
            this.distance = distance;
            this.size = size;
            this.pose = pose;
            this.type = type;
        }

        public static LandingTargetMsg Deserialize(MessageDeserializer deserializer) => new LandingTargetMsg(deserializer);

        private LandingTargetMsg(MessageDeserializer deserializer)
        {
            this.header = Std.HeaderMsg.Deserialize(deserializer);
            deserializer.Read(out this.target_num);
            deserializer.Read(out this.frame);
            deserializer.Read(out this.angle, sizeof(float), 2);
            deserializer.Read(out this.distance);
            deserializer.Read(out this.size, sizeof(float), 2);
            this.pose = Geometry.PoseMsg.Deserialize(deserializer);
            deserializer.Read(out this.type);
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.Write(this.header);
            serializer.Write(this.target_num);
            serializer.Write(this.frame);
            serializer.Write(this.angle);
            serializer.Write(this.distance);
            serializer.Write(this.size);
            serializer.Write(this.pose);
            serializer.Write(this.type);
        }

        public override string ToString()
        {
            return "LandingTargetMsg: " +
            "\nheader: " + header.ToString() +
            "\ntarget_num: " + target_num.ToString() +
            "\nframe: " + frame.ToString() +
            "\nangle: " + System.String.Join(", ", angle.ToList()) +
            "\ndistance: " + distance.ToString() +
            "\nsize: " + System.String.Join(", ", size.ToList()) +
            "\npose: " + pose.ToString() +
            "\ntype: " + type.ToString();
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize);
        }
    }
}
