//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.Mavros
{
    [Serializable]
    public class MountConfigureRequest : Message
    {
        public const string k_RosMessageName = "mavros_msgs/MountConfigure";
        public override string RosMessageName => k_RosMessageName;

        //  MAVLink message: DO_MOUNT_CONTROL
        //  https://mavlink.io/en/messages/common.html#MAV_CMD_DO_MOUNT_CONFIGURE
        public Std.HeaderMsg header;
        public byte mode;
        //  See enum MAV_MOUNT_MODE.
        // MAV_MOUNT_MODE
        public const byte MODE_RETRACT = 0;
        public const byte MODE_NEUTRAL = 1;
        public const byte MODE_MAVLINK_TARGETING = 2;
        public const byte MODE_RC_TARGETING = 3;
        public const byte MODE_GPS_POINT = 4;
        public bool stabilize_roll;
        //  stabilize roll? (1 = yes, 0 = no)
        public bool stabilize_pitch;
        //  stabilize pitch? (1 = yes, 0 = no)
        public bool stabilize_yaw;
        //  stabilize yaw? (1 = yes, 0 = no)
        public byte roll_input;
        //  roll input (See enum MOUNT_INPUT)
        public byte pitch_input;
        //  pitch input (See enum MOUNT_INPUT)
        public byte yaw_input;
        //  yaw input (See enum MOUNT_INPUT)
        // MOUNT_INPUT
        public const byte INPUT_ANGLE_BODY_FRAME = 0;
        public const byte INPUT_ANGULAR_RATE = 1;
        public const byte INPUT_ANGLE_ABSOLUTE_FRAME = 2;

        public MountConfigureRequest()
        {
            this.header = new Std.HeaderMsg();
            this.mode = 0;
            this.stabilize_roll = false;
            this.stabilize_pitch = false;
            this.stabilize_yaw = false;
            this.roll_input = 0;
            this.pitch_input = 0;
            this.yaw_input = 0;
        }

        public MountConfigureRequest(Std.HeaderMsg header, byte mode, bool stabilize_roll, bool stabilize_pitch, bool stabilize_yaw, byte roll_input, byte pitch_input, byte yaw_input)
        {
            this.header = header;
            this.mode = mode;
            this.stabilize_roll = stabilize_roll;
            this.stabilize_pitch = stabilize_pitch;
            this.stabilize_yaw = stabilize_yaw;
            this.roll_input = roll_input;
            this.pitch_input = pitch_input;
            this.yaw_input = yaw_input;
        }

        public static MountConfigureRequest Deserialize(MessageDeserializer deserializer) => new MountConfigureRequest(deserializer);

        private MountConfigureRequest(MessageDeserializer deserializer)
        {
            this.header = Std.HeaderMsg.Deserialize(deserializer);
            deserializer.Read(out this.mode);
            deserializer.Read(out this.stabilize_roll);
            deserializer.Read(out this.stabilize_pitch);
            deserializer.Read(out this.stabilize_yaw);
            deserializer.Read(out this.roll_input);
            deserializer.Read(out this.pitch_input);
            deserializer.Read(out this.yaw_input);
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.Write(this.header);
            serializer.Write(this.mode);
            serializer.Write(this.stabilize_roll);
            serializer.Write(this.stabilize_pitch);
            serializer.Write(this.stabilize_yaw);
            serializer.Write(this.roll_input);
            serializer.Write(this.pitch_input);
            serializer.Write(this.yaw_input);
        }

        public override string ToString()
        {
            return "MountConfigureRequest: " +
            "\nheader: " + header.ToString() +
            "\nmode: " + mode.ToString() +
            "\nstabilize_roll: " + stabilize_roll.ToString() +
            "\nstabilize_pitch: " + stabilize_pitch.ToString() +
            "\nstabilize_yaw: " + stabilize_yaw.ToString() +
            "\nroll_input: " + roll_input.ToString() +
            "\npitch_input: " + pitch_input.ToString() +
            "\nyaw_input: " + yaw_input.ToString();
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize);
        }
    }
}
